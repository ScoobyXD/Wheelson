
Wheelson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001708  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001890  08001890  00002890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d0  080018d0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080018d0  080018d0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018d0  080018d0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d0  080018d0  000028d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018d4  080018d4  000028d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080018d8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  080018e4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080018e4  00003054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004915  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f93  00000000  00000000  00007951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  000088e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000046c  00000000  00000000  00008ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d6b  00000000  00000000  00009354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a16  00000000  00000000  0002e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e244a  00000000  00000000  00033ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115f1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000167c  00000000  00000000  00115f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001175e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001878 	.word	0x08001878

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001878 	.word	0x08001878

080001c8 <main>:
volatile int16_t MPU9250_Data;
volatile int8_t MPU9250_Buffer[8];
volatile uint16_t UART_Command;

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	HAL_Init();
 80001ce:	f000 fba0 	bl	8000912 <HAL_Init>
	SystemClock_Config();
 80001d2:	f000 fac2 	bl	800075a <SystemClock_Config>
	TurretMotors_Config();
 80001d6:	f000 f949 	bl	800046c <TurretMotors_Config>
	TurretFire_Config();
 80001da:	f000 faa7 	bl	800072c <TurretFire_Config>
	USART2_Config();
 80001de:	f000 fa29 	bl	8000634 <USART2_Config>


	//UART Test

	ReadBuffer[0] = 65;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000254 <main+0x8c>)
 80001e4:	2241      	movs	r2, #65	@ 0x41
 80001e6:	701a      	strb	r2, [r3, #0]
	ReadBuffer[1] = 0x42;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000254 <main+0x8c>)
 80001ea:	2242      	movs	r2, #66	@ 0x42
 80001ec:	705a      	strb	r2, [r3, #1]
	ReadBuffer[2] = 67;
 80001ee:	4b19      	ldr	r3, [pc, #100]	@ (8000254 <main+0x8c>)
 80001f0:	2243      	movs	r2, #67	@ 0x43
 80001f2:	709a      	strb	r2, [r3, #2]
	ReadBuffer[3] = 0x44;
 80001f4:	4b17      	ldr	r3, [pc, #92]	@ (8000254 <main+0x8c>)
 80001f6:	2244      	movs	r2, #68	@ 0x44
 80001f8:	70da      	strb	r2, [r3, #3]
	ReadBuffer[4] = 69;
 80001fa:	4b16      	ldr	r3, [pc, #88]	@ (8000254 <main+0x8c>)
 80001fc:	2245      	movs	r2, #69	@ 0x45
 80001fe:	711a      	strb	r2, [r3, #4]
	ReadBuffer[5] = 0x46;
 8000200:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <main+0x8c>)
 8000202:	2246      	movs	r2, #70	@ 0x46
 8000204:	715a      	strb	r2, [r3, #5]
	ReadBuffer[6] = 71;
 8000206:	4b13      	ldr	r3, [pc, #76]	@ (8000254 <main+0x8c>)
 8000208:	2247      	movs	r2, #71	@ 0x47
 800020a:	719a      	strb	r2, [r3, #6]



	for(volatile uint8_t i = 0; i < 7; i++){
 800020c:	2300      	movs	r3, #0
 800020e:	71fb      	strb	r3, [r7, #7]
 8000210:	e013      	b.n	800023a <main+0x72>
		if((USART2->ISR &= USART_ISR_TXE)!=0){ //this
 8000212:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <main+0x90>)
 8000214:	69db      	ldr	r3, [r3, #28]
 8000216:	4a10      	ldr	r2, [pc, #64]	@ (8000258 <main+0x90>)
 8000218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800021c:	61d3      	str	r3, [r2, #28]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d006      	beq.n	8000230 <main+0x68>
			USART2->TDR = ReadBuffer[i];
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	b2db      	uxtb	r3, r3
 8000226:	461a      	mov	r2, r3
 8000228:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <main+0x8c>)
 800022a:	5c9a      	ldrb	r2, [r3, r2]
 800022c:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <main+0x90>)
 800022e:	851a      	strh	r2, [r3, #40]	@ 0x28
	for(volatile uint8_t i = 0; i < 7; i++){
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	3301      	adds	r3, #1
 8000236:	b2db      	uxtb	r3, r3
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b06      	cmp	r3, #6
 8000240:	d9e7      	bls.n	8000212 <main+0x4a>
		}
	}
	ClearBuffer(ReadBuffer,7);
 8000242:	2107      	movs	r1, #7
 8000244:	4803      	ldr	r0, [pc, #12]	@ (8000254 <main+0x8c>)
 8000246:	f000 f809 	bl	800025c <ClearBuffer>
 800024a:	2300      	movs	r3, #0
		}
	}

*/

}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000028 	.word	0x20000028
 8000258:	40004400 	.word	0x40004400

0800025c <ClearBuffer>:
		return FAIL;
	}
	return COMPLETE;
}

void ClearBuffer(uint8_t *Buffer, uint8_t len){
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]
	if(len <= 32){
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	2b20      	cmp	r3, #32
 800026c:	d80e      	bhi.n	800028c <ClearBuffer+0x30>
		for(uint8_t i=0; i<len; i++){
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e007      	b.n	8000284 <ClearBuffer+0x28>
			Buffer[i] = 0;
 8000274:	7bfb      	ldrb	r3, [r7, #15]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<len; i++){
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	3301      	adds	r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]
 8000284:	7bfa      	ldrb	r2, [r7, #15]
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	429a      	cmp	r2, r3
 800028a:	d3f3      	bcc.n	8000274 <ClearBuffer+0x18>
		}
	}
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <USART2_IRQHandler>:

void USART2_TX(uint8_t word){
	USART2->TDR = word;
}

void USART2_IRQHandler(void){ //this is a hardware interrupt, so will trigger by hardware even if function not in main.
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	if((USART2->ISR & USART_ISR_RXNE) != 0){ //register will be 1 if there is data in RDR register. Will be 0 if there is nothing.
 800029c:	4b2d      	ldr	r3, [pc, #180]	@ (8000354 <USART2_IRQHandler+0xbc>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d053      	beq.n	8000350 <USART2_IRQHandler+0xb8>
		UART_Command = USART2->RDR; // Reading RDR automatically clears the RXNE flag. Volatile because variable stores interrupt data.
 80002a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000354 <USART2_IRQHandler+0xbc>)
 80002aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000358 <USART2_IRQHandler+0xc0>)
 80002b0:	801a      	strh	r2, [r3, #0]

		if(UART_Command == 119){ //ASCII 'w' is 119
 80002b2:	4b29      	ldr	r3, [pc, #164]	@ (8000358 <USART2_IRQHandler+0xc0>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	2b77      	cmp	r3, #119	@ 0x77
 80002ba:	d102      	bne.n	80002c2 <USART2_IRQHandler+0x2a>
			TurretUp();
 80002bc:	f000 f84e 	bl	800035c <TurretUp>
 80002c0:	e036      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 115){ //ASCII 's' is 115
 80002c2:	4b25      	ldr	r3, [pc, #148]	@ (8000358 <USART2_IRQHandler+0xc0>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	2b73      	cmp	r3, #115	@ 0x73
 80002ca:	d102      	bne.n	80002d2 <USART2_IRQHandler+0x3a>
			TurretDown();
 80002cc:	f000 f85a 	bl	8000384 <TurretDown>
 80002d0:	e02e      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 97){ //ASCII 'a' is 97
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <USART2_IRQHandler+0xc0>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	2b61      	cmp	r3, #97	@ 0x61
 80002da:	d102      	bne.n	80002e2 <USART2_IRQHandler+0x4a>
			TurretLeft();
 80002dc:	f000 f866 	bl	80003ac <TurretLeft>
 80002e0:	e026      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 100){ //ASCII 'd' is 100
 80002e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <USART2_IRQHandler+0xc0>)
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	2b64      	cmp	r3, #100	@ 0x64
 80002ea:	d102      	bne.n	80002f2 <USART2_IRQHandler+0x5a>
			TurretRight();
 80002ec:	f000 f872 	bl	80003d4 <TurretRight>
 80002f0:	e01e      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 32){ //ASCII ' ' is 32
 80002f2:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <USART2_IRQHandler+0xc0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	d102      	bne.n	8000302 <USART2_IRQHandler+0x6a>
			TurretFire();
 80002fc:	f000 f89e 	bl	800043c <TurretFire>
 8000300:	e016      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 121){ //ASCII 'y' is 121
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <USART2_IRQHandler+0xc0>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	b29b      	uxth	r3, r3
 8000308:	2b79      	cmp	r3, #121	@ 0x79
 800030a:	d102      	bne.n	8000312 <USART2_IRQHandler+0x7a>
			TurretUpDownDoNothing();
 800030c:	f000 f876 	bl	80003fc <TurretUpDownDoNothing>
 8000310:	e00e      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 120){ //ASCII 'x' is 120
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <USART2_IRQHandler+0xc0>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	b29b      	uxth	r3, r3
 8000318:	2b78      	cmp	r3, #120	@ 0x78
 800031a:	d102      	bne.n	8000322 <USART2_IRQHandler+0x8a>
			TurretLeftRightDoNothing();
 800031c:	f000 f87e 	bl	800041c <TurretLeftRightDoNothing>
 8000320:	e006      	b.n	8000330 <USART2_IRQHandler+0x98>
		}
		else if(UART_Command == 122){ //ASCII 'z' is 120
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <USART2_IRQHandler+0xc0>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	b29b      	uxth	r3, r3
 8000328:	2b7a      	cmp	r3, #122	@ 0x7a
 800032a:	d101      	bne.n	8000330 <USART2_IRQHandler+0x98>
			TurretFireDoNothing();
 800032c:	f000 f891 	bl	8000452 <TurretFireDoNothing>
		}
		USART2->RQR = USART_RQR_RXFRQ;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <USART2_IRQHandler+0xbc>)
 8000332:	2208      	movs	r2, #8
 8000334:	831a      	strh	r2, [r3, #24]
		USART2->RQR &= ~USART_RQR_RXFRQ;
 8000336:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <USART2_IRQHandler+0xbc>)
 8000338:	8b1b      	ldrh	r3, [r3, #24]
 800033a:	b29b      	uxth	r3, r3
 800033c:	4a05      	ldr	r2, [pc, #20]	@ (8000354 <USART2_IRQHandler+0xbc>)
 800033e:	f023 0308 	bic.w	r3, r3, #8
 8000342:	b29b      	uxth	r3, r3
 8000344:	8313      	strh	r3, [r2, #24]
		USART2->TDR = UART_Command;
 8000346:	4b03      	ldr	r3, [pc, #12]	@ (8000354 <USART2_IRQHandler+0xbc>)
 8000348:	4a03      	ldr	r2, [pc, #12]	@ (8000358 <USART2_IRQHandler+0xc0>)
 800034a:	8812      	ldrh	r2, [r2, #0]
 800034c:	b292      	uxth	r2, r2
 800034e:	851a      	strh	r2, [r3, #40]	@ 0x28
	}
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40004400 	.word	0x40004400
 8000358:	2000004c 	.word	0x2000004c

0800035c <TurretUp>:



void TurretUp(void){
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR6; //direction pin 6
 8000360:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000364:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000368:	619a      	str	r2, [r3, #24]
	TIM3->CR1 |= TIM_CR1_CEN; //pwm TIM3 enable
 800036a:	4b05      	ldr	r3, [pc, #20]	@ (8000380 <TurretUp+0x24>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a04      	ldr	r2, [pc, #16]	@ (8000380 <TurretUp+0x24>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40000400 	.word	0x40000400

08000384 <TurretDown>:
void TurretDown(void){
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS6;
 8000388:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800038c:	2240      	movs	r2, #64	@ 0x40
 800038e:	619a      	str	r2, [r3, #24]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <TurretDown+0x24>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <TurretDown+0x24>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40000400 	.word	0x40000400

080003ac <TurretLeft>:
void TurretLeft(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR9; //direction pin 9. Value is 1, so we are resetting to 0, so i guess not outputting pulse is left
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80003b8:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_CEN; //pwm TIM1 enables
 80003ba:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <TurretLeft+0x24>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <TurretLeft+0x24>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6013      	str	r3, [r2, #0]
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40012c00 	.word	0x40012c00

080003d4 <TurretRight>:
void TurretRight(void){
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS9; //we're setting 1, which means right
 80003d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003e0:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_CEN;
 80003e2:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <TurretRight+0x24>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a04      	ldr	r2, [pc, #16]	@ (80003f8 <TurretRight+0x24>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40012c00 	.word	0x40012c00

080003fc <TurretUpDownDoNothing>:
void TurretUpDownDoNothing(void){
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <TurretUpDownDoNothing+0x1c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <TurretUpDownDoNothing+0x1c>)
 8000406:	f023 0301 	bic.w	r3, r3, #1
 800040a:	6013      	str	r3, [r2, #0]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40000400 	.word	0x40000400

0800041c <TurretLeftRightDoNothing>:
void TurretLeftRightDoNothing(void){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000420:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <TurretLeftRightDoNothing+0x1c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <TurretLeftRightDoNothing+0x1c>)
 8000426:	f023 0301 	bic.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40012c00 	.word	0x40012c00

0800043c <TurretFire>:
void TurretFire(void){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS5;
 8000440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000444:	2220      	movs	r2, #32
 8000446:	619a      	str	r2, [r3, #24]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <TurretFireDoNothing>:
void TurretFireDoNothing(void){
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR5;
 8000456:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800045a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800045e:	619a      	str	r2, [r3, #24]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <TurretMotors_Config>:

void TurretMotors_Config(void){
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR &= ~RCC_AHB2ENR_GPIOAEN;
 8000470:	4b6c      	ldr	r3, [pc, #432]	@ (8000624 <TurretMotors_Config+0x1b8>)
 8000472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000474:	4a6b      	ldr	r2, [pc, #428]	@ (8000624 <TurretMotors_Config+0x1b8>)
 8000476:	f023 0301 	bic.w	r3, r3, #1
 800047a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; //activate clock for port A
 800047c:	4b69      	ldr	r3, [pc, #420]	@ (8000624 <TurretMotors_Config+0x1b8>)
 800047e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000480:	4a68      	ldr	r2, [pc, #416]	@ (8000624 <TurretMotors_Config+0x1b8>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	64d3      	str	r3, [r2, #76]	@ 0x4c
	tmpreg = RCC->AHB2ENR;
 8000488:	4b66      	ldr	r3, [pc, #408]	@ (8000624 <TurretMotors_Config+0x1b8>)
 800048a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048c:	4a66      	ldr	r2, [pc, #408]	@ (8000628 <TurretMotors_Config+0x1bc>)
 800048e:	6013      	str	r3, [r2, #0]
	UNUSED(tmpreg); //standard practice to delay after starting timer to give it time to start
 8000490:	4b65      	ldr	r3, [pc, #404]	@ (8000628 <TurretMotors_Config+0x1bc>)
 8000492:	681b      	ldr	r3, [r3, #0]

	RCC->APB2ENR &= ~RCC_APB2ENR_TIM1EN;
 8000494:	4b63      	ldr	r3, [pc, #396]	@ (8000624 <TurretMotors_Config+0x1b8>)
 8000496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000498:	4a62      	ldr	r2, [pc, #392]	@ (8000624 <TurretMotors_Config+0x1b8>)
 800049a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800049e:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; //enable Tim1
 80004a0:	4b60      	ldr	r3, [pc, #384]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a4:	4a5f      	ldr	r2, [pc, #380]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004aa:	6613      	str	r3, [r2, #96]	@ 0x60
	tmpreg = RCC->APB2ENR;
 80004ac:	4b5d      	ldr	r3, [pc, #372]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004b0:	4a5d      	ldr	r2, [pc, #372]	@ (8000628 <TurretMotors_Config+0x1bc>)
 80004b2:	6013      	str	r3, [r2, #0]
	UNUSED(tmpreg); //standard practice to delay after starting timer to give it time to start
 80004b4:	4b5c      	ldr	r3, [pc, #368]	@ (8000628 <TurretMotors_Config+0x1bc>)
 80004b6:	681b      	ldr	r3, [r3, #0]

	// Whether CFGR stays or not doesnt affect the register but I could swear the motor is smoother if this remains.
	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 80004b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	4a59      	ldr	r2, [pc, #356]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004be:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80004c2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0 << RCC_CFGR_PPRE2_Pos); //APB high-speed prescaler (APB2) make sure PCLK2 is not divided, so HCLK not divided 0x00, default already 0 for this bit position
 80004c4:	4b57      	ldr	r3, [pc, #348]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004c6:	4a57      	ldr	r2, [pc, #348]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	6093      	str	r3, [r2, #8]

	//Base motor direction (push/pull) GPIO Pin 9, STM32 pin D8
	GPIOA->MODER &= ~GPIO_MODER_MODE9_Msk; //remember each pin is 2 bits wide, so when BIC must use 0x03
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004d6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80004da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE9_0; //set PA9 to output (01)
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004ea:	6013      	str	r3, [r2, #0]

	//GPIOA->OTYPER &= ~GPIO_OTYPER_OT9; //Output push-pull (reset state) (default value)
	//GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD9_Msk; // (reset state) set to 0x00, neither pull up nor pull down

	//Base motor direction GPIO Pin 6
	GPIOA->MODER &= ~GPIO_MODER_MODE6_Msk;
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE6_0; //set to output, 01
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000506:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800050a:	6013      	str	r3, [r2, #0]


	//Base motor left/right (PWM) GPIO Pin 8, TIM1_CH1, STM32 pin D7
	GPIOA->MODER &= ~GPIO_MODER_MODE8_Msk;
 800050c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000516:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800051a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE8_1; //set PA8 to alternative function
 800051c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;
 800052c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000532:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000536:	f023 030f 	bic.w	r3, r3, #15
 800053a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL8_0; //set PA8 to AF1 (alternate function 1), which is TIM1_CH1. Also AF[0] are pins 0:7 and AF[1] are pins 8:15
 800053c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000542:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6253      	str	r3, [r2, #36]	@ 0x24

	//GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED8_Msk; //11 very high speed, default is 00, you probably can't tell the difference anyways
	//GPIOA->OTYPER &= ~GPIO_OTYPER_OT8_Msk; //0x00 for output push/pull
	//GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk; //0x00 neither pull up nor pull down

	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M_Msk;
 800054c:	4b37      	ldr	r3, [pc, #220]	@ (800062c <TurretMotors_Config+0x1c0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a36      	ldr	r2, [pc, #216]	@ (800062c <TurretMotors_Config+0x1c0>)
 8000552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800055a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (6<<TIM_CCMR1_OC1M_Pos); //CCMR1 has configurations for both Ch1 and Ch2  // Set PWM mode 1 on CH1 (mode 1 is in upcounting, CH1 is active as long as TIM CNT < TIM CCR1. Configures 0110 for Ch1
 800055c:	4b33      	ldr	r3, [pc, #204]	@ (800062c <TurretMotors_Config+0x1c0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a32      	ldr	r2, [pc, #200]	@ (800062c <TurretMotors_Config+0x1c0>)
 8000562:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000566:	6193      	str	r3, [r2, #24]
	//TIM1->CCMR1 |= TIM_CCMR1_OC1PE;            // Enable preload register. (. TIMx_CCR1 preload value is loaded in the active register at each update event)

	//TIM1->PSC = 0; //so we keep clock at 4mhz (default for APB1) and not divide it by anything. (x) x (0+1)
	//left right motor
	TIM1->ARR = 65535; //Max value is 16 bit width 65535. This is not Hz, its the auto-reloader's counter. So higher this is, the longer it takes to do 1 PWM cycle peak to peak.
 8000568:	4b30      	ldr	r3, [pc, #192]	@ (800062c <TurretMotors_Config+0x1c0>)
 800056a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800056e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR1 = 8192; //keep in mind CCR1 is channel 1, so CCR2 would be channel 2
 8000570:	4b2e      	ldr	r3, [pc, #184]	@ (800062c <TurretMotors_Config+0x1c0>)
 8000572:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000576:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCER |= TIM_CCER_CC1E;  // Enable CH1 output (Capture mode enable)
 8000578:	4b2c      	ldr	r3, [pc, #176]	@ (800062c <TurretMotors_Config+0x1c0>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4a2b      	ldr	r2, [pc, #172]	@ (800062c <TurretMotors_Config+0x1c0>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6213      	str	r3, [r2, #32]
	TIM1->BDTR |= TIM_BDTR_MOE;   // Main output enable (For advanced timers like TIM1/TIM8)
 8000584:	4b29      	ldr	r3, [pc, #164]	@ (800062c <TurretMotors_Config+0x1c0>)
 8000586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000588:	4a28      	ldr	r2, [pc, #160]	@ (800062c <TurretMotors_Config+0x1c0>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800058e:	6453      	str	r3, [r2, #68]	@ 0x44

	//Base motor up/down (PWM) GPIO Pin 7, TIM3_CH2
	GPIOA->MODER &= ~GPIO_MODER_MODE7_Msk;
 8000590:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800059a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800059e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE7_1; //Alternate function for pin 12
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ae:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL7_Msk;
 80005b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL7_1; //Pin 7, AF[0] is 0010 for TIM3_CH2. Also AF[0] are pins 0:7 and AF[1] are pins 8:15
 80005c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005c4:	6a1b      	ldr	r3, [r3, #32]
 80005c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80005ce:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR1 &= ~RCC_APB1ENR1_TIM3EN_Msk;
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80005d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005d4:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80005d6:	f023 0302 	bic.w	r3, r3, #2
 80005da:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN; //enable Tim3
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80005de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e0:	4a10      	ldr	r2, [pc, #64]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6593      	str	r3, [r2, #88]	@ 0x58
	tmpreg = RCC->APB1ENR1;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <TurretMotors_Config+0x1b8>)
 80005ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <TurretMotors_Config+0x1bc>)
 80005ee:	6013      	str	r3, [r2, #0]
	UNUSED(tmpreg); //standard practice to delay after starting timer to give it time to start
 80005f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <TurretMotors_Config+0x1bc>)
 80005f2:	681b      	ldr	r3, [r3, #0]

	//up down motor
	TIM3->CCMR1 |= (6<<TIM_CCMR1_OC2M_Pos); //CCMR1 has configurations for both Ch1 and Ch2, this configures 0110 for Ch2, mode 1 which is upcounting TIM CNT < TIM CCR1
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <TurretMotors_Config+0x1c4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <TurretMotors_Config+0x1c4>)
 80005fa:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80005fe:	6193      	str	r3, [r2, #24]
	TIM3->ARR = 65535; //Auto reload value (marks the rising edge in PWM) Max value is 16 bit width, 65535
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <TurretMotors_Config+0x1c4>)
 8000602:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000606:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR2 = 100; //Set duty rate for Ch2
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <TurretMotors_Config+0x1c4>)
 800060a:	2264      	movs	r2, #100	@ 0x64
 800060c:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCER |= TIM_CCER_CC2E; //enable ch2 output
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <TurretMotors_Config+0x1c4>)
 8000610:	6a1b      	ldr	r3, [r3, #32]
 8000612:	4a07      	ldr	r2, [pc, #28]	@ (8000630 <TurretMotors_Config+0x1c4>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6213      	str	r3, [r2, #32]
	//TIM3 is a general timer, not advanced like TIM1 or TIM 8 so no need for BDTR and MOE
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000
 8000628:	20000048 	.word	0x20000048
 800062c:	40012c00 	.word	0x40012c00
 8000630:	40000400 	.word	0x40000400

08000634 <USART2_Config>:

void USART2_Config(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//Port A already opened in TurretMotors_Config
	RCC->APB1ENR1 &= ~RCC_APB1ENR1_USART2EN_Msk;
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <USART2_Config+0xa8>)
 800063a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <USART2_Config+0xa8>)
 800063e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000642:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; //start APB1 timer (didnt need AHB1 to open APB1)
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <USART2_Config+0xa8>)
 8000646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000648:	4a24      	ldr	r2, [pc, #144]	@ (80006dc <USART2_Config+0xa8>)
 800064a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800064e:	6593      	str	r3, [r2, #88]	@ 0x58
	tmpreg = RCC->APB1ENR1;
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <USART2_Config+0xa8>)
 8000652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000654:	4a22      	ldr	r2, [pc, #136]	@ (80006e0 <USART2_Config+0xac>)
 8000656:	6013      	str	r3, [r2, #0]
	UNUSED(tmpreg);
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <USART2_Config+0xac>)
 800065a:	681b      	ldr	r3, [r3, #0]

	GPIOA->MODER &= ~GPIO_MODER_MODE2_Msk; //keep in mind the reset value is 11, so need to BIC the mask first
 800065c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000666:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800066a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE2_1; //PA_2 (TX) 10 Alternate function
 800066c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000676:	f043 0320 	orr.w	r3, r3, #32
 800067a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE3_Msk;
 800067c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000686:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800068a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE3_1; //PA_3 (RX) 10 Alternate function
 800068c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (0x7UL << 8U); //Alternate function 0111 (USART2) for PA_2
 800069c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80006aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7UL << 12U); //Alternate function 0111 (USART2) for PA_3
 80006ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006b6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80006ba:	6213      	str	r3, [r2, #32]
	//USART2->CR1 |= USART_CR1_PCE //parity control (1)enable/(0)disable
	//USART2->CR1 |= USART_CR1_PS; //parity 0 even, 1 odd. This field only written when USART disabled
	//USART2->CR1 &= ~USART_CR1_M1; //I want M[1:0] to be 00: 1 Start bit, 8 data bits, n stop bits (reset value)
	//USART2->CR1 &= ~USART_CR1_M0; (reset value)
	//USART2->CR2 &= ~USART_CR2_STOP; //set n stop bits to 1 stop bit (also, keep in mind 0 for all of these are default) im just setting these here for learning reasons (reset value)
	USART2->CR1 |= (
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <USART2_Config+0xb0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <USART2_Config+0xb0>)
 80006c2:	f043 03ad 	orr.w	r3, r3, #173	@ 0xad
 80006c6:	6013      	str	r3, [r2, #0]
			USART_CR1_TXEIE | //allow TXNE interrupts in USART2
			USART_CR1_RXNEIE | //allow RXNE interrupts in USART2
			USART_CR1_UE); //enable usart2. This is last because other USART2 stuff needs to configure first
						   //also keep in mind, bit 28 M1 word length default at 0, 1 start bit, 8 data bits, n stop bits.

	USART2->BRR = 4000000 / 9600; //4mHz/9600 baud. Gives 417hz/1 baud. UART frame is 1 bit every 417 APB1 clock cycles
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <USART2_Config+0xb0>)
 80006ca:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80006ce:	60da      	str	r2, [r3, #12]
								   //we set M[1:0] as 00 so 1 start bit, 8 data bits, and 1 end bit. 10 x 417 is 4170 clock cycles per word
								   //if 4mHz that mean each uart word should take about 1ms and each bit is 1x10^-4 s. Which is sort of slow?
	NVIC_SetIRQ(USART2_IRQn); //set up NVIC to allow USART2 interrupts. Now the hardware takes over so whenever RDR has data, the hardware will trigger the interrupt handler
 80006d0:	2026      	movs	r0, #38	@ 0x26
 80006d2:	f000 f809 	bl	80006e8 <NVIC_SetIRQ>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	20000048 	.word	0x20000048
 80006e4:	40004400 	.word	0x40004400

080006e8 <NVIC_SetIRQ>:

void NVIC_SetIRQ(IRQn_Type IRQ){ //doesnt work with negative IRQs (which are error interrupts) so don't use negative ones.
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[IRQ>>5UL] = 1<<(IRQ % 32); //ISER[1] = 1<6UL, interrupts are chosen by the bit index, not by the actual bit values, so thats why 1<<6 instead of 110b
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	425a      	negs	r2, r3
 80006f8:	f003 031f 	and.w	r3, r3, #31
 80006fc:	f002 021f 	and.w	r2, r2, #31
 8000700:	bf58      	it	pl
 8000702:	4253      	negpl	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	2301      	movs	r3, #1
 800070a:	fa03 f102 	lsl.w	r1, r3, r2
 800070e:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <NVIC_SetIRQ+0x40>)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	115b      	asrs	r3, r3, #5
 8000716:	b25b      	sxtb	r3, r3
 8000718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <TurretFire_Config>:

void TurretFire_Config(void){
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODE5_Msk; //output mode 01. if the reset state is 11, you cannot just do |= 01, you must bic 11 first.
 8000730:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800073a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800073e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0; //output mode 01
 8000740:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800074a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <SystemClock_Config>:



// I did not write the stuff below
void SystemClock_Config(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b096      	sub	sp, #88	@ 0x58
 800075e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2244      	movs	r2, #68	@ 0x44
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f001 f859 	bl	8001820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000780:	f000 fa30 	bl	8000be4 <HAL_PWREx_ControlVoltageScaling>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800078a:	f000 f82c 	bl	80007e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800078e:	2310      	movs	r3, #16
 8000790:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800079a:	2360      	movs	r3, #96	@ 0x60
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fa72 	bl	8000c90 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007b2:	f000 f818 	bl	80007e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fe3a 	bl	8001448 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007da:	f000 f804 	bl	80007e6 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	@ 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ea:	b672      	cpsid	i
}
 80007ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <HAL_MspInit+0x44>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6613      	str	r3, [r2, #96]	@ 0x60
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_MspInit+0x44>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6593      	str	r3, [r2, #88]	@ 0x58
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f893 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f000 ff9f 	bl	8001830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fc69 	bl	80001c8 <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	080018d8 	.word	0x080018d8
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000054 	.word	0x20000054

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>

08000912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f91f 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f80e 	bl	8000944 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e001      	b.n	8000938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000934:	f7ff ff5e 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000938:	79fb      	ldrb	r3, [r7, #7]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_InitTick+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d023      	beq.n	80009a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_InitTick+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f91d 	bl	8000bae <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d809      	bhi.n	8000994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f8f5 	bl	8000b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <HAL_InitTick+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e007      	b.n	80009a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e001      	b.n	80009a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000050 	.word	0x20000050

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000050 	.word	0x20000050

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	@ (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	@ 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	@ 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff47 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5c 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb0 	bl	8000b1c <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40007000 	.word	0x40007000

08000be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bf2:	d130      	bne.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c00:	d038      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2232      	movs	r2, #50	@ 0x32
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c28:	e002      	b.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c3c:	d102      	bne.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f2      	bne.n	8000c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c50:	d110      	bne.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e00f      	b.n	8000c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c62:	d007      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40007000 	.word	0x40007000
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	431bde83 	.word	0x431bde83

08000c90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e3ca      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4b97      	ldr	r3, [pc, #604]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cac:	4b94      	ldr	r3, [pc, #592]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80e4 	beq.w	8000e8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <HAL_RCC_OscConfig+0x4a>
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	f040 808b 	bne.w	8000de8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	f040 8087 	bne.w	8000de8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cda:	4b89      	ldr	r3, [pc, #548]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x62>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e3a2      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	4b82      	ldr	r3, [pc, #520]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <HAL_RCC_OscConfig+0x7c>
 8000d02:	4b7f      	ldr	r3, [pc, #508]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d0a:	e005      	b.n	8000d18 <HAL_RCC_OscConfig+0x88>
 8000d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d223      	bcs.n	8000d64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fd1d 	bl	8001760 <RCC_SetFlashLatencyFromMSIRange>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e383      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d30:	4b73      	ldr	r3, [pc, #460]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a72      	ldr	r2, [pc, #456]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b70      	ldr	r3, [pc, #448]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	496d      	ldr	r1, [pc, #436]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	4968      	ldr	r1, [pc, #416]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	604b      	str	r3, [r1, #4]
 8000d62:	e025      	b.n	8000db0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d64:	4b66      	ldr	r3, [pc, #408]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a65      	ldr	r2, [pc, #404]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b63      	ldr	r3, [pc, #396]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4960      	ldr	r1, [pc, #384]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d82:	4b5f      	ldr	r3, [pc, #380]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	495b      	ldr	r1, [pc, #364]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d109      	bne.n	8000db0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fcdd 	bl	8001760 <RCC_SetFlashLatencyFromMSIRange>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e343      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000db0:	f000 fc4a 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8000db4:	4602      	mov	r2, r0
 8000db6:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	4950      	ldr	r1, [pc, #320]	@ (8000f04 <HAL_RCC_OscConfig+0x274>)
 8000dc2:	5ccb      	ldrb	r3, [r1, r3]
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	4a4e      	ldr	r2, [pc, #312]	@ (8000f08 <HAL_RCC_OscConfig+0x278>)
 8000dce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <HAL_RCC_OscConfig+0x27c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fdb5 	bl	8000944 <HAL_InitTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d052      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	e327      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d032      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000df0:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a42      	ldr	r2, [pc, #264]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fdf2 	bl	80009e4 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e04:	f7ff fdee 	bl	80009e4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e310      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e16:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e22:	4b37      	ldr	r3, [pc, #220]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a36      	ldr	r2, [pc, #216]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	4931      	ldr	r1, [pc, #196]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e40:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	492c      	ldr	r1, [pc, #176]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
 8000e54:	e01a      	b.n	8000e8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fdbf 	bl	80009e4 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fdbb 	bl	80009e4 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e2dd      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f0      	bne.n	8000e6a <HAL_RCC_OscConfig+0x1da>
 8000e88:	e000      	b.n	8000e8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d074      	beq.n	8000f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d005      	beq.n	8000eaa <HAL_RCC_OscConfig+0x21a>
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2b0c      	cmp	r3, #12
 8000ea2:	d10e      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d064      	beq.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d160      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e2ba      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eca:	d106      	bne.n	8000eda <HAL_RCC_OscConfig+0x24a>
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e026      	b.n	8000f28 <HAL_RCC_OscConfig+0x298>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ee2:	d115      	bne.n	8000f10 <HAL_RCC_OscConfig+0x280>
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a02      	ldr	r2, [pc, #8]	@ (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e014      	b.n	8000f28 <HAL_RCC_OscConfig+0x298>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	08001890 	.word	0x08001890
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	4ba0      	ldr	r3, [pc, #640]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a9f      	ldr	r2, [pc, #636]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a9c      	ldr	r2, [pc, #624]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd58 	bl	80009e4 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fd54 	bl	80009e4 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	@ 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e276      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4a:	4b92      	ldr	r3, [pc, #584]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2a8>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd44 	bl	80009e4 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fd40 	bl	80009e4 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	@ 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e262      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f72:	4b88      	ldr	r3, [pc, #544]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x2d0>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d060      	beq.n	8001050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x310>
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d119      	bne.n	8000fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d116      	bne.n	8000fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x328>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e23f      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	4b76      	ldr	r3, [pc, #472]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4973      	ldr	r1, [pc, #460]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fcc:	e040      	b.n	8001050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d023      	beq.n	800101e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6e      	ldr	r2, [pc, #440]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fcff 	bl	80009e4 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fcfb 	bl	80009e4 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e21d      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ffc:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b62      	ldr	r3, [pc, #392]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	495f      	ldr	r1, [pc, #380]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e018      	b.n	8001050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b5d      	ldr	r3, [pc, #372]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a5c      	ldr	r2, [pc, #368]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fcdb 	bl	80009e4 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001032:	f7ff fcd7 	bl	80009e4 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e1f9      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001044:	4b53      	ldr	r3, [pc, #332]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d03c      	beq.n	80010d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01c      	beq.n	800109e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001064:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800106a:	4a4a      	ldr	r2, [pc, #296]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001074:	f7ff fcb6 	bl	80009e4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fcb2 	bl	80009e4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1d4      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800108e:	4b41      	ldr	r3, [pc, #260]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ef      	beq.n	800107c <HAL_RCC_OscConfig+0x3ec>
 800109c:	e01b      	b.n	80010d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109e:	4b3d      	ldr	r3, [pc, #244]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ae:	f7ff fc99 	bl	80009e4 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc95 	bl	80009e4 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e1b7      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c8:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1ef      	bne.n	80010b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80a6 	beq.w	8001230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f8:	4a26      	ldr	r2, [pc, #152]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110c:	2301      	movs	r3, #1
 800110e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d118      	bne.n	800114e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001128:	f7ff fc5c 	bl	80009e4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001130:	f7ff fc58 	bl	80009e4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e17a      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_RCC_OscConfig+0x508>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <HAL_RCC_OscConfig+0x4d8>
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001166:	e029      	b.n	80011bc <HAL_RCC_OscConfig+0x52c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d115      	bne.n	800119c <HAL_RCC_OscConfig+0x50c>
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001186:	4a03      	ldr	r2, [pc, #12]	@ (8001194 <HAL_RCC_OscConfig+0x504>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001190:	e014      	b.n	80011bc <HAL_RCC_OscConfig+0x52c>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40007000 	.word	0x40007000
 800119c:	4b9c      	ldr	r3, [pc, #624]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a2:	4a9b      	ldr	r2, [pc, #620]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011ac:	4b98      	ldr	r3, [pc, #608]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011b2:	4a97      	ldr	r2, [pc, #604]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d016      	beq.n	80011f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc0e 	bl	80009e4 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f7ff fc0a 	bl	80009e4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e12a      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80011e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ed      	beq.n	80011cc <HAL_RCC_OscConfig+0x53c>
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff fbf7 	bl	80009e4 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fbf3 	bl	80009e4 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e113      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001210:	4b7f      	ldr	r3, [pc, #508]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1ed      	bne.n	80011fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b7a      	ldr	r3, [pc, #488]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	4a79      	ldr	r2, [pc, #484]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 800122a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800122e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80fe 	beq.w	8001436 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123e:	2b02      	cmp	r3, #2
 8001240:	f040 80d0 	bne.w	80013e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001244:	4b72      	ldr	r3, [pc, #456]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001254:	429a      	cmp	r2, r3
 8001256:	d130      	bne.n	80012ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	3b01      	subs	r3, #1
 8001264:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001266:	429a      	cmp	r2, r3
 8001268:	d127      	bne.n	80012ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001274:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001276:	429a      	cmp	r2, r3
 8001278:	d11f      	bne.n	80012ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001284:	2a07      	cmp	r2, #7
 8001286:	bf14      	ite	ne
 8001288:	2201      	movne	r2, #1
 800128a:	2200      	moveq	r2, #0
 800128c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128e:	4293      	cmp	r3, r2
 8001290:	d113      	bne.n	80012ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	3b01      	subs	r3, #1
 80012a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d109      	bne.n	80012ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	3b01      	subs	r3, #1
 80012b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d06e      	beq.n	8001398 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d069      	beq.n	8001394 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012c0:	4b53      	ldr	r3, [pc, #332]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012cc:	4b50      	ldr	r3, [pc, #320]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0ad      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80012e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e8:	f7ff fb7c 	bl	80009e4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fb78 	bl	80009e4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e09a      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001302:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130e:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	4b40      	ldr	r3, [pc, #256]	@ (8001414 <HAL_RCC_OscConfig+0x784>)
 8001314:	4013      	ands	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800131e:	3a01      	subs	r2, #1
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	4311      	orrs	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001328:	0212      	lsls	r2, r2, #8
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001330:	0852      	lsrs	r2, r2, #1
 8001332:	3a01      	subs	r2, #1
 8001334:	0552      	lsls	r2, r2, #21
 8001336:	4311      	orrs	r1, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800133c:	0852      	lsrs	r2, r2, #1
 800133e:	3a01      	subs	r2, #1
 8001340:	0652      	lsls	r2, r2, #25
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001348:	0912      	lsrs	r2, r2, #4
 800134a:	0452      	lsls	r2, r2, #17
 800134c:	430a      	orrs	r2, r1
 800134e:	4930      	ldr	r1, [pc, #192]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800135e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a2a      	ldr	r2, [pc, #168]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800136a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800136c:	f7ff fb3a 	bl	80009e4 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb36 	bl	80009e4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e058      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001392:	e050      	b.n	8001436 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e04f      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d148      	bne.n	8001436 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013bc:	f7ff fb12 	bl	80009e4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fb0e 	bl	80009e4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e030      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x734>
 80013e2:	e028      	b.n	8001436 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d023      	beq.n	8001432 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_RCC_OscConfig+0x780>)
 80013f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff faf5 	bl	80009e4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fc:	e00c      	b.n	8001418 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff faf1 	bl	80009e4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d905      	bls.n	8001418 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e013      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
 8001410:	40021000 	.word	0x40021000
 8001414:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_RCC_OscConfig+0x7b0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ec      	bne.n	80013fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x7b0>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4905      	ldr	r1, [pc, #20]	@ (8001440 <HAL_RCC_OscConfig+0x7b0>)
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_RCC_OscConfig+0x7b4>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
 8001430:	e001      	b.n	8001436 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	feeefffc 	.word	0xfeeefffc

08001448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0e7      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b75      	ldr	r3, [pc, #468]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d910      	bls.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b72      	ldr	r3, [pc, #456]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	4970      	ldr	r1, [pc, #448]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b6e      	ldr	r3, [pc, #440]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cf      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d010      	beq.n	80014ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d908      	bls.n	80014ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b63      	ldr	r3, [pc, #396]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4960      	ldr	r1, [pc, #384]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d04c      	beq.n	8001560 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d121      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0a6      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	4b54      	ldr	r3, [pc, #336]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d115      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e09a      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e08e      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150e:	4b4a      	ldr	r3, [pc, #296]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e086      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b46      	ldr	r3, [pc, #280]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4943      	ldr	r1, [pc, #268]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001530:	f7ff fa58 	bl	80009e4 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff fa54 	bl	80009e4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e06e      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d010      	beq.n	800158e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001578:	429a      	cmp	r2, r3
 800157a:	d208      	bcs.n	800158e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	492b      	ldr	r1, [pc, #172]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d210      	bcs.n	80015be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159c:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 0207 	bic.w	r2, r3, #7
 80015a4:	4923      	ldr	r1, [pc, #140]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ac:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d001      	beq.n	80015be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e036      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4918      	ldr	r1, [pc, #96]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4910      	ldr	r1, [pc, #64]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015fc:	f000 f824 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	490b      	ldr	r1, [pc, #44]	@ (800163c <HAL_RCC_ClockConfig+0x1f4>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1f8>)
 800161a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_ClockConfig+0x1fc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f98f 	bl	8000944 <HAL_InitTick>
 8001626:	4603      	mov	r3, r0
 8001628:	72fb      	strb	r3, [r7, #11]

  return status;
 800162a:	7afb      	ldrb	r3, [r7, #11]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	08001890 	.word	0x08001890
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b3e      	ldr	r3, [pc, #248]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001660:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x34>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d121      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11e      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001688:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e005      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x110>)
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	e004      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <HAL_RCC_GetSysClockFreq+0x114>)
 80016ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d134      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0xa6>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d003      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0xac>
 80016ec:	e005      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x110>)
 80016f0:	617b      	str	r3, [r7, #20]
      break;
 80016f2:	e005      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_RCC_GetSysClockFreq+0x114>)
 80016f6:	617b      	str	r3, [r7, #20]
      break;
 80016f8:	e002      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0e5b      	lsrs	r3, r3, #25
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	3301      	adds	r3, #1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001740:	69bb      	ldr	r3, [r7, #24]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	080018a0 	.word	0x080018a0
 8001758:	00f42400 	.word	0x00f42400
 800175c:	007a1200 	.word	0x007a1200

08001760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800176c:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001778:	f7ff fa26 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
 800177c:	6178      	str	r0, [r7, #20]
 800177e:	e014      	b.n	80017aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	4a24      	ldr	r2, [pc, #144]	@ (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	@ 0x58
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001798:	f7ff fa16 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
 800179c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017b0:	d10b      	bne.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b80      	cmp	r3, #128	@ 0x80
 80017b6:	d919      	bls.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80017bc:	d902      	bls.n	80017c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017be:	2302      	movs	r3, #2
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e013      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e010      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b80      	cmp	r3, #128	@ 0x80
 80017ce:	d902      	bls.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017d0:	2303      	movs	r3, #3
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e00a      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b80      	cmp	r3, #128	@ 0x80
 80017da:	d102      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e004      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b70      	cmp	r3, #112	@ 0x70
 80017e6:	d101      	bne.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e8:	2301      	movs	r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 0207 	bic.w	r2, r3, #7
 80017f4:	4909      	ldr	r1, [pc, #36]	@ (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40022000 	.word	0x40022000

08001820 <memset>:
 8001820:	4402      	add	r2, r0
 8001822:	4603      	mov	r3, r0
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <memset+0xa>
 8001828:	4770      	bx	lr
 800182a:	f803 1b01 	strb.w	r1, [r3], #1
 800182e:	e7f9      	b.n	8001824 <memset+0x4>

08001830 <__libc_init_array>:
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	4d0d      	ldr	r5, [pc, #52]	@ (8001868 <__libc_init_array+0x38>)
 8001834:	4c0d      	ldr	r4, [pc, #52]	@ (800186c <__libc_init_array+0x3c>)
 8001836:	1b64      	subs	r4, r4, r5
 8001838:	10a4      	asrs	r4, r4, #2
 800183a:	2600      	movs	r6, #0
 800183c:	42a6      	cmp	r6, r4
 800183e:	d109      	bne.n	8001854 <__libc_init_array+0x24>
 8001840:	4d0b      	ldr	r5, [pc, #44]	@ (8001870 <__libc_init_array+0x40>)
 8001842:	4c0c      	ldr	r4, [pc, #48]	@ (8001874 <__libc_init_array+0x44>)
 8001844:	f000 f818 	bl	8001878 <_init>
 8001848:	1b64      	subs	r4, r4, r5
 800184a:	10a4      	asrs	r4, r4, #2
 800184c:	2600      	movs	r6, #0
 800184e:	42a6      	cmp	r6, r4
 8001850:	d105      	bne.n	800185e <__libc_init_array+0x2e>
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	f855 3b04 	ldr.w	r3, [r5], #4
 8001858:	4798      	blx	r3
 800185a:	3601      	adds	r6, #1
 800185c:	e7ee      	b.n	800183c <__libc_init_array+0xc>
 800185e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001862:	4798      	blx	r3
 8001864:	3601      	adds	r6, #1
 8001866:	e7f2      	b.n	800184e <__libc_init_array+0x1e>
 8001868:	080018d0 	.word	0x080018d0
 800186c:	080018d0 	.word	0x080018d0
 8001870:	080018d0 	.word	0x080018d0
 8001874:	080018d4 	.word	0x080018d4

08001878 <_init>:
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187a:	bf00      	nop
 800187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187e:	bc08      	pop	{r3}
 8001880:	469e      	mov	lr, r3
 8001882:	4770      	bx	lr

08001884 <_fini>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	bf00      	nop
 8001888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188a:	bc08      	pop	{r3}
 800188c:	469e      	mov	lr, r3
 800188e:	4770      	bx	lr
