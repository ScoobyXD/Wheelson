
Wheelson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08002b7c  08002b7c  00003b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d04  08002d04  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d08  08002d08  00003d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002d0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08002d74  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002d74  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000472c  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001117  00000000  00000000  000087c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  000098e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047d  00000000  00000000  00009f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002587b  00000000  00000000  0000a38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000612c  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3820  00000000  00000000  00035d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119554  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a4  00000000  00000000  00119598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011b63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002b64 	.word	0x08002b64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002b64 	.word	0x08002b64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
void TurretLeft(void);
void TurretDoNothing(void);


int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  HAL_Init();
 8000276:	f000 fa8e 	bl	8000796 <HAL_Init>
  SystemClock_Config();
 800027a:	f000 f90f 	bl	800049c <SystemClock_Config>
  TurretMotors_Config();
 800027e:	f000 f857 	bl	8000330 <TurretMotors_Config>

  char UserCommand;

  while (1) //as of now doing roughly 400 pulses every second
  {
	  printf("Give command: \n");
 8000282:	480b      	ldr	r0, [pc, #44]	@ (80002b0 <main+0x40>)
 8000284:	f001 fb26 	bl	80018d4 <puts>
	  scanf("%d", &UserCommand);
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	4619      	mov	r1, r3
 800028c:	4809      	ldr	r0, [pc, #36]	@ (80002b4 <main+0x44>)
 800028e:	f001 fb29 	bl	80018e4 <iscanf>
	  //poll for user inputs
	  //logic to check commands
	  if(UserCommand == 'A'){
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b41      	cmp	r3, #65	@ 0x41
 8000296:	d102      	bne.n	800029e <main+0x2e>
		  TurretLeft();
 8000298:	f000 f826 	bl	80002e8 <TurretLeft>
 800029c:	e7f1      	b.n	8000282 <main+0x12>
	  }
	  else if(UserCommand == 'D'){
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b44      	cmp	r3, #68	@ 0x44
 80002a2:	d102      	bne.n	80002aa <main+0x3a>
		  TurretRight();
 80002a4:	f000 f808 	bl	80002b8 <TurretRight>
 80002a8:	e7eb      	b.n	8000282 <main+0x12>
	  }
	  else {
		  TurretDoNothing();
 80002aa:	f000 f835 	bl	8000318 <TurretDoNothing>
  {
 80002ae:	e7e8      	b.n	8000282 <main+0x12>
 80002b0:	08002b7c 	.word	0x08002b7c
 80002b4:	08002b8c 	.word	0x08002b8c

080002b8 <TurretRight>:
	  }
  }
}
void TurretRight(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS9;
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002c4:	619a      	str	r2, [r3, #24]
	TIM1->CCR1 = 4096;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <TurretRight+0x2c>)
 80002c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002cc:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CR1 |= TIM_CR1_CEN;
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <TurretRight+0x2c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <TurretRight+0x2c>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]

}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40012c00 	.word	0x40012c00

080002e8 <TurretLeft>:

void TurretLeft(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR9;
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80002f4:	619a      	str	r2, [r3, #24]
	TIM1->CCR1 = 4096;
 80002f6:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <TurretLeft+0x2c>)
 80002f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002fc:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CR1 |= TIM_CR1_CEN;
 80002fe:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <TurretLeft+0x2c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a04      	ldr	r2, [pc, #16]	@ (8000314 <TurretLeft+0x2c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40012c00 	.word	0x40012c00

08000318 <TurretDoNothing>:
void TurretDoNothing(void){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800031c:	4b03      	ldr	r3, [pc, #12]	@ (800032c <TurretDoNothing+0x14>)
 800031e:	2200      	movs	r2, #0
 8000320:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40012c00 	.word	0x40012c00

08000330 <TurretMotors_Config>:

void TurretMotors_Config(void){
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
	__IO uint32_t tmpreg;

	RCC->AHB2ENR &= ~RCC_AHB2ENR_GPIOAEN;
 8000336:	4b57      	ldr	r3, [pc, #348]	@ (8000494 <TurretMotors_Config+0x164>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033a:	4a56      	ldr	r2, [pc, #344]	@ (8000494 <TurretMotors_Config+0x164>)
 800033c:	f023 0301 	bic.w	r3, r3, #1
 8000340:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; //activate clock for port A
 8000342:	4b54      	ldr	r3, [pc, #336]	@ (8000494 <TurretMotors_Config+0x164>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000346:	4a53      	ldr	r2, [pc, #332]	@ (8000494 <TurretMotors_Config+0x164>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	tmpreg = RCC->AHB2ENR;
 800034e:	4b51      	ldr	r3, [pc, #324]	@ (8000494 <TurretMotors_Config+0x164>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000352:	607b      	str	r3, [r7, #4]
	UNUSED(tmpreg); //standard practice to delay after starting timer to give it time to start
 8000354:	687b      	ldr	r3, [r7, #4]

	RCC->APB2ENR &= ~RCC_APB2ENR_TIM1EN;
 8000356:	4b4f      	ldr	r3, [pc, #316]	@ (8000494 <TurretMotors_Config+0x164>)
 8000358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800035a:	4a4e      	ldr	r2, [pc, #312]	@ (8000494 <TurretMotors_Config+0x164>)
 800035c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000360:	6613      	str	r3, [r2, #96]	@ 0x60
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; //enable Tim1
 8000362:	4b4c      	ldr	r3, [pc, #304]	@ (8000494 <TurretMotors_Config+0x164>)
 8000364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000366:	4a4b      	ldr	r2, [pc, #300]	@ (8000494 <TurretMotors_Config+0x164>)
 8000368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800036c:	6613      	str	r3, [r2, #96]	@ 0x60
	tmpreg = RCC->APB2ENR;
 800036e:	4b49      	ldr	r3, [pc, #292]	@ (8000494 <TurretMotors_Config+0x164>)
 8000370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000372:	607b      	str	r3, [r7, #4]
	UNUSED(tmpreg); //standard practice to delay after starting timer to give it time to start
 8000374:	687b      	ldr	r3, [r7, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8000376:	4b47      	ldr	r3, [pc, #284]	@ (8000494 <TurretMotors_Config+0x164>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	4a46      	ldr	r2, [pc, #280]	@ (8000494 <TurretMotors_Config+0x164>)
 800037c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000380:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0 << RCC_CFGR_PPRE2_Pos); // make sure PCLK2 is not divided, so HCLK not divided 0x00
 8000382:	4b44      	ldr	r3, [pc, #272]	@ (8000494 <TurretMotors_Config+0x164>)
 8000384:	4a43      	ldr	r2, [pc, #268]	@ (8000494 <TurretMotors_Config+0x164>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	6093      	str	r3, [r2, #8]

	//Base motor direction (push/pull) GPIO Pin 9, STM32 pin D8
	GPIOA->MODER &= ~GPIO_MODER_MODE9_Msk; //remember each pin is 2 bits wide, so when BIC must use 0x03
 800038a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000394:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000398:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE9_0; //set PA9 to output (01)
 800039a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003a8:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~GPIO_OTYPER_OT9; //Output push-pull (reset state) (default value)
 80003aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80003b8:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD9_Msk; //set to 0x00, neither pull up nor pull down
 80003ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80003c8:	60d3      	str	r3, [r2, #12]

	//Base motor power (PWM) GPIO Pin 8, STM32 pin D7
	GPIOA->MODER &= ~GPIO_MODER_MODE8_Msk;
 80003ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003d4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80003d8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE8_1; //set PA8 to alternative function
 80003da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e8:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;
 80003ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003f0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003f4:	f023 030f 	bic.w	r3, r3, #15
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL8_0; //set PA8 to AF1 (alternate function 1), which is TIM1_CH1
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000400:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED8_Msk; //11 very high speed
 800040a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000414:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000418:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT8_Msk; //0x00 for output push/pull
 800041a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000428:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk; //0x00 neither pull up nor pull down
 800042a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000434:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000438:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M_Msk;
 800043a:	4b17      	ldr	r3, [pc, #92]	@ (8000498 <TurretMotors_Config+0x168>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a16      	ldr	r2, [pc, #88]	@ (8000498 <TurretMotors_Config+0x168>)
 8000440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000448:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos);  // Set PWM mode 1 on CH1 (mode 1 is in upcounting, CH1 is active as long as TIM CNT < TIM CCR1
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <TurretMotors_Config+0x168>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <TurretMotors_Config+0x168>)
 8000450:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000454:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE;            // Enable preload register. (. TIMx_CCR1 preload value is loaded in the active register at each update event)
 8000456:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <TurretMotors_Config+0x168>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a0f      	ldr	r2, [pc, #60]	@ (8000498 <TurretMotors_Config+0x168>)
 800045c:	f043 0308 	orr.w	r3, r3, #8
 8000460:	6193      	str	r3, [r2, #24]

	TIM1->PSC = 0; //so we keep clock at 80mhz and not divide it by anything. (x) x (0+1)
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <TurretMotors_Config+0x168>)
 8000464:	2200      	movs	r2, #0
 8000466:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 8192; //Max value is 16 bit width 65535
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <TurretMotors_Config+0x168>)
 800046a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800046e:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM1->CCER |= TIM_CCER_CC1E;  // Enable CH1 output (Capture mode enable)
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <TurretMotors_Config+0x168>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a08      	ldr	r2, [pc, #32]	@ (8000498 <TurretMotors_Config+0x168>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6213      	str	r3, [r2, #32]
	TIM1->BDTR |= TIM_BDTR_MOE;   // Main output enable (For advanced timers like TIM1/TIM8)
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <TurretMotors_Config+0x168>)
 800047e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000480:	4a05      	ldr	r2, [pc, #20]	@ (8000498 <TurretMotors_Config+0x168>)
 8000482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000486:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40012c00 	.word	0x40012c00

0800049c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b096      	sub	sp, #88	@ 0x58
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	2244      	movs	r2, #68	@ 0x44
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 fb04 	bl	8001ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	463b      	mov	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004c2:	f000 fad1 	bl	8000a68 <HAL_PWREx_ControlVoltageScaling>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004cc:	f000 f82c 	bl	8000528 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004d0:	2310      	movs	r3, #16
 80004d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d4:	2301      	movs	r3, #1
 80004d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004dc:	2360      	movs	r3, #96	@ 0x60
 80004de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fb13 	bl	8000b14 <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004f4:	f000 f818 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	230f      	movs	r3, #15
 80004fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004fc:	2300      	movs	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fedb 	bl	80012cc <HAL_RCC_ClockConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800051c:	f000 f804 	bl	8000528 <Error_Handler>
  }
}
 8000520:	bf00      	nop
 8000522:	3758      	adds	r7, #88	@ 0x58
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x44>)
 800053c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800053e:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <HAL_MspInit+0x44>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6613      	str	r3, [r2, #96]	@ 0x60
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_MspInit+0x44>)
 8000548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_MspInit+0x44>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_MspInit+0x44>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055c:	6593      	str	r3, [r2, #88]	@ 0x58
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_MspInit+0x44>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f935 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}

080005da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e00a      	b.n	8000602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ec:	f3af 8000 	nop.w
 80005f0:	4601      	mov	r1, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	60ba      	str	r2, [r7, #8]
 80005f8:	b2ca      	uxtb	r2, r1
 80005fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3301      	adds	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbf0      	blt.n	80005ec <_read+0x12>
  }

  return len;
 800060a:	687b      	ldr	r3, [r7, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e009      	b.n	800063a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	60ba      	str	r2, [r7, #8]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbf1      	blt.n	8000626 <_write+0x12>
  }
  return len;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_close>:

int _close(int file)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000674:	605a      	str	r2, [r3, #4]
  return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <_isatty>:

int _isatty(int file)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f001 fa36 	bl	8001b54 <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20018000 	.word	0x20018000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000084 	.word	0x20000084
 800071c:	200001d8 	.word	0x200001d8

08000720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <SystemInit+0x20>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <SystemInit+0x20>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800077c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000748:	f7ff ffea 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	@ (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	@ (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000772:	f001 f9f5 	bl	8001b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000776:	f7ff fd7b 	bl	8000270 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800077c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000788:	08002d0c 	.word	0x08002d0c
  ldr r2, =_sbss
 800078c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000790:	200001d8 	.word	0x200001d8

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>

08000796 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f91f 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 f80e 	bl	80007c8 <HAL_InitTick>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	e001      	b.n	80007bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b8:	f7ff febc 	bl	8000534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <HAL_InitTick+0x6c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d023      	beq.n	8000824 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <HAL_InitTick+0x70>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_InitTick+0x6c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f91d 	bl	8000a32 <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10f      	bne.n	800081e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d809      	bhi.n	8000818 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f8f5 	bl	80009fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000810:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_InitTick+0x74>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e007      	b.n	8000828 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e004      	b.n	8000828 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e001      	b.n	8000828 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_IncTick+0x20>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_IncTick+0x24>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_IncTick+0x24>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	20000088 	.word	0x20000088

08000868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <HAL_GetTick+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000088 	.word	0x20000088

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	@ (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	@ 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	@ 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff47 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff5c 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff8e 	bl	8000938 <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5d 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffb0 	bl	80009a0 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40007000 	.word	0x40007000

08000a68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a76:	d130      	bne.n	8000ada <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a78:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a84:	d038      	beq.n	8000af8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2232      	movs	r2, #50	@ 0x32
 8000a9c:	fb02 f303 	mul.w	r3, r2, r3
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000aac:	e002      	b.n	8000ab4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ac0:	d102      	bne.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1f2      	bne.n	8000aae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ad4:	d110      	bne.n	8000af8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e00f      	b.n	8000afa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ae6:	d007      	beq.n	8000af8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000af0:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000af6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40007000 	.word	0x40007000
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	431bde83 	.word	0x431bde83

08000b14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e3ca      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b26:	4b97      	ldr	r3, [pc, #604]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
 8000b2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b30:	4b94      	ldr	r3, [pc, #592]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 80e4 	beq.w	8000d10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <HAL_RCC_OscConfig+0x4a>
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	2b0c      	cmp	r3, #12
 8000b52:	f040 808b 	bne.w	8000c6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	f040 8087 	bne.w	8000c6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b5e:	4b89      	ldr	r3, [pc, #548]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <HAL_RCC_OscConfig+0x62>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e3a2      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a1a      	ldr	r2, [r3, #32]
 8000b7a:	4b82      	ldr	r3, [pc, #520]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <HAL_RCC_OscConfig+0x7c>
 8000b86:	4b7f      	ldr	r3, [pc, #508]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000b8e:	e005      	b.n	8000b9c <HAL_RCC_OscConfig+0x88>
 8000b90:	4b7c      	ldr	r3, [pc, #496]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d223      	bcs.n	8000be8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fd1d 	bl	80015e4 <RCC_SetFlashLatencyFromMSIRange>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e383      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb4:	4b73      	ldr	r3, [pc, #460]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a72      	ldr	r2, [pc, #456]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b70      	ldr	r3, [pc, #448]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	496d      	ldr	r1, [pc, #436]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	4968      	ldr	r1, [pc, #416]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	604b      	str	r3, [r1, #4]
 8000be6:	e025      	b.n	8000c34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000be8:	4b66      	ldr	r3, [pc, #408]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a65      	ldr	r2, [pc, #404]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b63      	ldr	r3, [pc, #396]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4960      	ldr	r1, [pc, #384]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c02:	4313      	orrs	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c06:	4b5f      	ldr	r3, [pc, #380]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	495b      	ldr	r1, [pc, #364]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d109      	bne.n	8000c34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a1b      	ldr	r3, [r3, #32]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fcdd 	bl	80015e4 <RCC_SetFlashLatencyFromMSIRange>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e343      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c34:	f000 fc4a 	bl	80014cc <HAL_RCC_GetSysClockFreq>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b52      	ldr	r3, [pc, #328]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	f003 030f 	and.w	r3, r3, #15
 8000c44:	4950      	ldr	r1, [pc, #320]	@ (8000d88 <HAL_RCC_OscConfig+0x274>)
 8000c46:	5ccb      	ldrb	r3, [r1, r3]
 8000c48:	f003 031f 	and.w	r3, r3, #31
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	4a4e      	ldr	r2, [pc, #312]	@ (8000d8c <HAL_RCC_OscConfig+0x278>)
 8000c52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c54:	4b4e      	ldr	r3, [pc, #312]	@ (8000d90 <HAL_RCC_OscConfig+0x27c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fdb5 	bl	80007c8 <HAL_InitTick>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d052      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	e327      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d032      	beq.n	8000cda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c74:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a42      	ldr	r2, [pc, #264]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fdf2 	bl	8000868 <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c88:	f7ff fdee 	bl	8000868 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e310      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f0      	beq.n	8000c88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ca6:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a36      	ldr	r2, [pc, #216]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b34      	ldr	r3, [pc, #208]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4931      	ldr	r1, [pc, #196]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	492c      	ldr	r1, [pc, #176]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
 8000cd8:	e01a      	b.n	8000d10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000cda:	4b2a      	ldr	r3, [pc, #168]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a29      	ldr	r2, [pc, #164]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000ce0:	f023 0301 	bic.w	r3, r3, #1
 8000ce4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fdbf 	bl	8000868 <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cee:	f7ff fdbb 	bl	8000868 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e2dd      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f0      	bne.n	8000cee <HAL_RCC_OscConfig+0x1da>
 8000d0c:	e000      	b.n	8000d10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d074      	beq.n	8000e06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x21a>
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2b0c      	cmp	r3, #12
 8000d26:	d10e      	bne.n	8000d46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d10b      	bne.n	8000d46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d064      	beq.n	8000e04 <HAL_RCC_OscConfig+0x2f0>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d160      	bne.n	8000e04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e2ba      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4e:	d106      	bne.n	8000d5e <HAL_RCC_OscConfig+0x24a>
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e026      	b.n	8000dac <HAL_RCC_OscConfig+0x298>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d66:	d115      	bne.n	8000d94 <HAL_RCC_OscConfig+0x280>
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a02      	ldr	r2, [pc, #8]	@ (8000d84 <HAL_RCC_OscConfig+0x270>)
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e014      	b.n	8000dac <HAL_RCC_OscConfig+0x298>
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	08002b9c 	.word	0x08002b9c
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000004 	.word	0x20000004
 8000d94:	4ba0      	ldr	r3, [pc, #640]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a9f      	ldr	r2, [pc, #636]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b9d      	ldr	r3, [pc, #628]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a9c      	ldr	r2, [pc, #624]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d013      	beq.n	8000ddc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db4:	f7ff fd58 	bl	8000868 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fd54 	bl	8000868 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	@ 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e276      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dce:	4b92      	ldr	r3, [pc, #584]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0x2a8>
 8000dda:	e014      	b.n	8000e06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fd44 	bl	8000868 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fd40 	bl	8000868 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	@ 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e262      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df6:	4b88      	ldr	r3, [pc, #544]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x2d0>
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d060      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d005      	beq.n	8000e24 <HAL_RCC_OscConfig+0x310>
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b0c      	cmp	r3, #12
 8000e1c:	d119      	bne.n	8000e52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d116      	bne.n	8000e52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e24:	4b7c      	ldr	r3, [pc, #496]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x328>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e23f      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3c:	4b76      	ldr	r3, [pc, #472]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	061b      	lsls	r3, r3, #24
 8000e4a:	4973      	ldr	r1, [pc, #460]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e50:	e040      	b.n	8000ed4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d023      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e66:	f7ff fcff 	bl	8000868 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fcfb 	bl	8000868 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e21d      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e80:	4b65      	ldr	r3, [pc, #404]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b62      	ldr	r3, [pc, #392]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	061b      	lsls	r3, r3, #24
 8000e9a:	495f      	ldr	r1, [pc, #380]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
 8000ea0:	e018      	b.n	8000ed4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eae:	f7ff fcdb 	bl	8000868 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fcd7 	bl	8000868 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e1f9      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec8:	4b53      	ldr	r3, [pc, #332]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f0      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d03c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d01c      	beq.n	8000f22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eee:	4a4a      	ldr	r2, [pc, #296]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fcb6 	bl	8000868 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f00:	f7ff fcb2 	bl	8000868 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e1d4      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f12:	4b41      	ldr	r3, [pc, #260]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0ef      	beq.n	8000f00 <HAL_RCC_OscConfig+0x3ec>
 8000f20:	e01b      	b.n	8000f5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f22:	4b3d      	ldr	r3, [pc, #244]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f28:	4a3b      	ldr	r2, [pc, #236]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f32:	f7ff fc99 	bl	8000868 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fc95 	bl	8000868 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e1b7      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f4c:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1ef      	bne.n	8000f3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80a6 	beq.w	80010b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10d      	bne.n	8000f94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	4a26      	ldr	r2, [pc, #152]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f90:	2301      	movs	r3, #1
 8000f92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <HAL_RCC_OscConfig+0x508>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d118      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <HAL_RCC_OscConfig+0x508>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <HAL_RCC_OscConfig+0x508>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fc5c 	bl	8000868 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb4:	f7ff fc58 	bl	8000868 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e17a      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_RCC_OscConfig+0x508>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <HAL_RCC_OscConfig+0x4d8>
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000fea:	e029      	b.n	8001040 <HAL_RCC_OscConfig+0x52c>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d115      	bne.n	8001020 <HAL_RCC_OscConfig+0x50c>
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ffa:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 8001006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800100a:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <HAL_RCC_OscConfig+0x504>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001014:	e014      	b.n	8001040 <HAL_RCC_OscConfig+0x52c>
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40007000 	.word	0x40007000
 8001020:	4b9c      	ldr	r3, [pc, #624]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001026:	4a9b      	ldr	r2, [pc, #620]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001030:	4b98      	ldr	r3, [pc, #608]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001036:	4a97      	ldr	r2, [pc, #604]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d016      	beq.n	8001076 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001048:	f7ff fc0e 	bl	8000868 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800104e:	e00a      	b.n	8001066 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f7ff fc0a 	bl	8000868 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800105e:	4293      	cmp	r3, r2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e12a      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001066:	4b8b      	ldr	r3, [pc, #556]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ed      	beq.n	8001050 <HAL_RCC_OscConfig+0x53c>
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001076:	f7ff fbf7 	bl	8000868 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fbf3 	bl	8000868 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e113      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001094:	4b7f      	ldr	r3, [pc, #508]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1ed      	bne.n	800107e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	4a79      	ldr	r2, [pc, #484]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80010ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80fe 	beq.w	80012ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	f040 80d0 	bne.w	8001268 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010c8:	4b72      	ldr	r3, [pc, #456]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d8:	429a      	cmp	r2, r3
 80010da:	d130      	bne.n	800113e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	3b01      	subs	r3, #1
 80010e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d127      	bne.n	800113e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d11f      	bne.n	800113e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001108:	2a07      	cmp	r2, #7
 800110a:	bf14      	ite	ne
 800110c:	2201      	movne	r2, #1
 800110e:	2200      	moveq	r2, #0
 8001110:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001112:	4293      	cmp	r3, r2
 8001114:	d113      	bne.n	800113e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	3b01      	subs	r3, #1
 8001124:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001126:	429a      	cmp	r2, r3
 8001128:	d109      	bne.n	800113e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	3b01      	subs	r3, #1
 8001138:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800113a:	429a      	cmp	r2, r3
 800113c:	d06e      	beq.n	800121c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b0c      	cmp	r3, #12
 8001142:	d069      	beq.n	8001218 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001144:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001150:	4b50      	ldr	r3, [pc, #320]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0ad      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001160:	4b4c      	ldr	r3, [pc, #304]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a4b      	ldr	r2, [pc, #300]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800116a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800116c:	f7ff fb7c 	bl	8000868 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001174:	f7ff fb78 	bl	8000868 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e09a      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001186:	4b43      	ldr	r3, [pc, #268]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001192:	4b40      	ldr	r3, [pc, #256]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <HAL_RCC_OscConfig+0x784>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80011a2:	3a01      	subs	r2, #1
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	4311      	orrs	r1, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80011ac:	0212      	lsls	r2, r2, #8
 80011ae:	4311      	orrs	r1, r2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80011b4:	0852      	lsrs	r2, r2, #1
 80011b6:	3a01      	subs	r2, #1
 80011b8:	0552      	lsls	r2, r2, #21
 80011ba:	4311      	orrs	r1, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80011c0:	0852      	lsrs	r2, r2, #1
 80011c2:	3a01      	subs	r2, #1
 80011c4:	0652      	lsls	r2, r2, #25
 80011c6:	4311      	orrs	r1, r2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80011cc:	0912      	lsrs	r2, r2, #4
 80011ce:	0452      	lsls	r2, r2, #17
 80011d0:	430a      	orrs	r2, r1
 80011d2:	4930      	ldr	r1, [pc, #192]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80011de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 80011ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011f0:	f7ff fb3a 	bl	8000868 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff fb36 	bl	8000868 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e058      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120a:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001216:	e050      	b.n	80012ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e04f      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d148      	bne.n	80012ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 800122e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001232:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800123e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001240:	f7ff fb12 	bl	8000868 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fb0e 	bl	8000868 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e030      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x734>
 8001266:	e028      	b.n	80012ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d023      	beq.n	80012b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_RCC_OscConfig+0x780>)
 8001274:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff faf5 	bl	8000868 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001280:	e00c      	b.n	800129c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff faf1 	bl	8000868 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d905      	bls.n	800129c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e013      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
 8001294:	40021000 	.word	0x40021000
 8001298:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_RCC_OscConfig+0x7b0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ec      	bne.n	8001282 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_RCC_OscConfig+0x7b0>)
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	4905      	ldr	r1, [pc, #20]	@ (80012c4 <HAL_RCC_OscConfig+0x7b0>)
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_RCC_OscConfig+0x7b4>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	60cb      	str	r3, [r1, #12]
 80012b4:	e001      	b.n	80012ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	feeefffc 	.word	0xfeeefffc

080012cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0e7      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e0:	4b75      	ldr	r3, [pc, #468]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d910      	bls.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b72      	ldr	r3, [pc, #456]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	4970      	ldr	r1, [pc, #448]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b6e      	ldr	r3, [pc, #440]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0cf      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d010      	beq.n	800133e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	4b66      	ldr	r3, [pc, #408]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001328:	429a      	cmp	r2, r3
 800132a:	d908      	bls.n	800133e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800132c:	4b63      	ldr	r3, [pc, #396]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4960      	ldr	r1, [pc, #384]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800133a:	4313      	orrs	r3, r2
 800133c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d04c      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001352:	4b5a      	ldr	r3, [pc, #360]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d121      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0a6      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d107      	bne.n	800137a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d115      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e09a      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001382:	4b4e      	ldr	r3, [pc, #312]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e08e      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001392:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e086      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013a2:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f023 0203 	bic.w	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4943      	ldr	r1, [pc, #268]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013b4:	f7ff fa58 	bl	8000868 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013bc:	f7ff fa54 	bl	8000868 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e06e      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	4b3a      	ldr	r3, [pc, #232]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 020c 	and.w	r2, r3, #12
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d1eb      	bne.n	80013bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d010      	beq.n	8001412 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	4b31      	ldr	r3, [pc, #196]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d208      	bcs.n	8001412 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	492b      	ldr	r1, [pc, #172]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800140e:	4313      	orrs	r3, r2
 8001410:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d210      	bcs.n	8001442 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001420:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 0207 	bic.w	r2, r3, #7
 8001428:	4923      	ldr	r1, [pc, #140]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e036      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4918      	ldr	r1, [pc, #96]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d009      	beq.n	8001480 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4910      	ldr	r1, [pc, #64]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001480:	f000 f824 	bl	80014cc <HAL_RCC_GetSysClockFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_RCC_ClockConfig+0x1f0>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	490b      	ldr	r1, [pc, #44]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_RCC_ClockConfig+0x1f8>)
 800149e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_RCC_ClockConfig+0x1fc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f98f 	bl	80007c8 <HAL_InitTick>
 80014aa:	4603      	mov	r3, r0
 80014ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80014ae:	7afb      	ldrb	r3, [r7, #11]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40022000 	.word	0x40022000
 80014bc:	40021000 	.word	0x40021000
 80014c0:	08002b9c 	.word	0x08002b9c
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	@ 0x24
 80014d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e4:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x34>
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d121      	bne.n	800153e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d11e      	bne.n	800153e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001500:	4b34      	ldr	r3, [pc, #208]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800150c:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e005      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001528:	4a2b      	ldr	r2, [pc, #172]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10d      	bne.n	8001554 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d102      	bne.n	800154a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	e004      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	2b08      	cmp	r3, #8
 800154e:	d101      	bne.n	8001554 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001552:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d134      	bne.n	80015c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d003      	beq.n	8001572 <HAL_RCC_GetSysClockFreq+0xa6>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d003      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0xac>
 8001570:	e005      	b.n	800157e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001574:	617b      	str	r3, [r7, #20]
      break;
 8001576:	e005      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800157a:	617b      	str	r3, [r7, #20]
      break;
 800157c:	e002      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	617b      	str	r3, [r7, #20]
      break;
 8001582:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	3301      	adds	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	fb03 f202 	mul.w	r2, r3, r2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	0e5b      	lsrs	r3, r3, #25
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	3301      	adds	r3, #1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015c4:	69bb      	ldr	r3, [r7, #24]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	@ 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08002bac 	.word	0x08002bac
 80015dc:	00f42400 	.word	0x00f42400
 80015e0:	007a1200 	.word	0x007a1200

080015e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015fc:	f7ff fa26 	bl	8000a4c <HAL_PWREx_GetVoltageRange>
 8001600:	6178      	str	r0, [r7, #20]
 8001602:	e014      	b.n	800162e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001608:	4a24      	ldr	r2, [pc, #144]	@ (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800161c:	f7ff fa16 	bl	8000a4c <HAL_PWREx_GetVoltageRange>
 8001620:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001634:	d10b      	bne.n	800164e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b80      	cmp	r3, #128	@ 0x80
 800163a:	d919      	bls.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001640:	d902      	bls.n	8001648 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001642:	2302      	movs	r3, #2
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	e013      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	e010      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b80      	cmp	r3, #128	@ 0x80
 8001652:	d902      	bls.n	800165a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001654:	2303      	movs	r3, #3
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e00a      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b80      	cmp	r3, #128	@ 0x80
 800165e:	d102      	bne.n	8001666 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e004      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b70      	cmp	r3, #112	@ 0x70
 800166a:	d101      	bne.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 0207 	bic.w	r2, r3, #7
 8001678:	4909      	ldr	r1, [pc, #36]	@ (80016a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	40022000 	.word	0x40022000

080016a4 <std>:
 80016a4:	2300      	movs	r3, #0
 80016a6:	b510      	push	{r4, lr}
 80016a8:	4604      	mov	r4, r0
 80016aa:	e9c0 3300 	strd	r3, r3, [r0]
 80016ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016b2:	6083      	str	r3, [r0, #8]
 80016b4:	8181      	strh	r1, [r0, #12]
 80016b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80016b8:	81c2      	strh	r2, [r0, #14]
 80016ba:	6183      	str	r3, [r0, #24]
 80016bc:	4619      	mov	r1, r3
 80016be:	2208      	movs	r2, #8
 80016c0:	305c      	adds	r0, #92	@ 0x5c
 80016c2:	f000 f9f9 	bl	8001ab8 <memset>
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <std+0x58>)
 80016c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <std+0x5c>)
 80016cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <std+0x60>)
 80016d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <std+0x64>)
 80016d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <std+0x68>)
 80016d8:	6224      	str	r4, [r4, #32]
 80016da:	429c      	cmp	r4, r3
 80016dc:	d006      	beq.n	80016ec <std+0x48>
 80016de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016e2:	4294      	cmp	r4, r2
 80016e4:	d002      	beq.n	80016ec <std+0x48>
 80016e6:	33d0      	adds	r3, #208	@ 0xd0
 80016e8:	429c      	cmp	r4, r3
 80016ea:	d105      	bne.n	80016f8 <std+0x54>
 80016ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016f4:	f000 ba58 	b.w	8001ba8 <__retarget_lock_init_recursive>
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	bf00      	nop
 80016fc:	08001909 	.word	0x08001909
 8001700:	0800192b 	.word	0x0800192b
 8001704:	08001963 	.word	0x08001963
 8001708:	08001987 	.word	0x08001987
 800170c:	2000008c 	.word	0x2000008c

08001710 <stdio_exit_handler>:
 8001710:	4a02      	ldr	r2, [pc, #8]	@ (800171c <stdio_exit_handler+0xc>)
 8001712:	4903      	ldr	r1, [pc, #12]	@ (8001720 <stdio_exit_handler+0x10>)
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <stdio_exit_handler+0x14>)
 8001716:	f000 b869 	b.w	80017ec <_fwalk_sglue>
 800171a:	bf00      	nop
 800171c:	2000000c 	.word	0x2000000c
 8001720:	080024a5 	.word	0x080024a5
 8001724:	2000001c 	.word	0x2000001c

08001728 <cleanup_stdio>:
 8001728:	6841      	ldr	r1, [r0, #4]
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <cleanup_stdio+0x34>)
 800172c:	4299      	cmp	r1, r3
 800172e:	b510      	push	{r4, lr}
 8001730:	4604      	mov	r4, r0
 8001732:	d001      	beq.n	8001738 <cleanup_stdio+0x10>
 8001734:	f000 feb6 	bl	80024a4 <_fflush_r>
 8001738:	68a1      	ldr	r1, [r4, #8]
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <cleanup_stdio+0x38>)
 800173c:	4299      	cmp	r1, r3
 800173e:	d002      	beq.n	8001746 <cleanup_stdio+0x1e>
 8001740:	4620      	mov	r0, r4
 8001742:	f000 feaf 	bl	80024a4 <_fflush_r>
 8001746:	68e1      	ldr	r1, [r4, #12]
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <cleanup_stdio+0x3c>)
 800174a:	4299      	cmp	r1, r3
 800174c:	d004      	beq.n	8001758 <cleanup_stdio+0x30>
 800174e:	4620      	mov	r0, r4
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f000 bea6 	b.w	80024a4 <_fflush_r>
 8001758:	bd10      	pop	{r4, pc}
 800175a:	bf00      	nop
 800175c:	2000008c 	.word	0x2000008c
 8001760:	200000f4 	.word	0x200000f4
 8001764:	2000015c 	.word	0x2000015c

08001768 <global_stdio_init.part.0>:
 8001768:	b510      	push	{r4, lr}
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <global_stdio_init.part.0+0x30>)
 800176c:	4c0b      	ldr	r4, [pc, #44]	@ (800179c <global_stdio_init.part.0+0x34>)
 800176e:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <global_stdio_init.part.0+0x38>)
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	4620      	mov	r0, r4
 8001774:	2200      	movs	r2, #0
 8001776:	2104      	movs	r1, #4
 8001778:	f7ff ff94 	bl	80016a4 <std>
 800177c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001780:	2201      	movs	r2, #1
 8001782:	2109      	movs	r1, #9
 8001784:	f7ff ff8e 	bl	80016a4 <std>
 8001788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800178c:	2202      	movs	r2, #2
 800178e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001792:	2112      	movs	r1, #18
 8001794:	f7ff bf86 	b.w	80016a4 <std>
 8001798:	200001c4 	.word	0x200001c4
 800179c:	2000008c 	.word	0x2000008c
 80017a0:	08001711 	.word	0x08001711

080017a4 <__sfp_lock_acquire>:
 80017a4:	4801      	ldr	r0, [pc, #4]	@ (80017ac <__sfp_lock_acquire+0x8>)
 80017a6:	f000 ba00 	b.w	8001baa <__retarget_lock_acquire_recursive>
 80017aa:	bf00      	nop
 80017ac:	200001cd 	.word	0x200001cd

080017b0 <__sfp_lock_release>:
 80017b0:	4801      	ldr	r0, [pc, #4]	@ (80017b8 <__sfp_lock_release+0x8>)
 80017b2:	f000 b9fb 	b.w	8001bac <__retarget_lock_release_recursive>
 80017b6:	bf00      	nop
 80017b8:	200001cd 	.word	0x200001cd

080017bc <__sinit>:
 80017bc:	b510      	push	{r4, lr}
 80017be:	4604      	mov	r4, r0
 80017c0:	f7ff fff0 	bl	80017a4 <__sfp_lock_acquire>
 80017c4:	6a23      	ldr	r3, [r4, #32]
 80017c6:	b11b      	cbz	r3, 80017d0 <__sinit+0x14>
 80017c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017cc:	f7ff bff0 	b.w	80017b0 <__sfp_lock_release>
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__sinit+0x28>)
 80017d2:	6223      	str	r3, [r4, #32]
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__sinit+0x2c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f5      	bne.n	80017c8 <__sinit+0xc>
 80017dc:	f7ff ffc4 	bl	8001768 <global_stdio_init.part.0>
 80017e0:	e7f2      	b.n	80017c8 <__sinit+0xc>
 80017e2:	bf00      	nop
 80017e4:	08001729 	.word	0x08001729
 80017e8:	200001c4 	.word	0x200001c4

080017ec <_fwalk_sglue>:
 80017ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f0:	4607      	mov	r7, r0
 80017f2:	4688      	mov	r8, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	2600      	movs	r6, #0
 80017f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017fc:	f1b9 0901 	subs.w	r9, r9, #1
 8001800:	d505      	bpl.n	800180e <_fwalk_sglue+0x22>
 8001802:	6824      	ldr	r4, [r4, #0]
 8001804:	2c00      	cmp	r4, #0
 8001806:	d1f7      	bne.n	80017f8 <_fwalk_sglue+0xc>
 8001808:	4630      	mov	r0, r6
 800180a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800180e:	89ab      	ldrh	r3, [r5, #12]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d907      	bls.n	8001824 <_fwalk_sglue+0x38>
 8001814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001818:	3301      	adds	r3, #1
 800181a:	d003      	beq.n	8001824 <_fwalk_sglue+0x38>
 800181c:	4629      	mov	r1, r5
 800181e:	4638      	mov	r0, r7
 8001820:	47c0      	blx	r8
 8001822:	4306      	orrs	r6, r0
 8001824:	3568      	adds	r5, #104	@ 0x68
 8001826:	e7e9      	b.n	80017fc <_fwalk_sglue+0x10>

08001828 <_puts_r>:
 8001828:	6a03      	ldr	r3, [r0, #32]
 800182a:	b570      	push	{r4, r5, r6, lr}
 800182c:	6884      	ldr	r4, [r0, #8]
 800182e:	4605      	mov	r5, r0
 8001830:	460e      	mov	r6, r1
 8001832:	b90b      	cbnz	r3, 8001838 <_puts_r+0x10>
 8001834:	f7ff ffc2 	bl	80017bc <__sinit>
 8001838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800183a:	07db      	lsls	r3, r3, #31
 800183c:	d405      	bmi.n	800184a <_puts_r+0x22>
 800183e:	89a3      	ldrh	r3, [r4, #12]
 8001840:	0598      	lsls	r0, r3, #22
 8001842:	d402      	bmi.n	800184a <_puts_r+0x22>
 8001844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001846:	f000 f9b0 	bl	8001baa <__retarget_lock_acquire_recursive>
 800184a:	89a3      	ldrh	r3, [r4, #12]
 800184c:	0719      	lsls	r1, r3, #28
 800184e:	d502      	bpl.n	8001856 <_puts_r+0x2e>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d135      	bne.n	80018c2 <_puts_r+0x9a>
 8001856:	4621      	mov	r1, r4
 8001858:	4628      	mov	r0, r5
 800185a:	f000 f8d7 	bl	8001a0c <__swsetup_r>
 800185e:	b380      	cbz	r0, 80018c2 <_puts_r+0x9a>
 8001860:	f04f 35ff 	mov.w	r5, #4294967295
 8001864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001866:	07da      	lsls	r2, r3, #31
 8001868:	d405      	bmi.n	8001876 <_puts_r+0x4e>
 800186a:	89a3      	ldrh	r3, [r4, #12]
 800186c:	059b      	lsls	r3, r3, #22
 800186e:	d402      	bmi.n	8001876 <_puts_r+0x4e>
 8001870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001872:	f000 f99b 	bl	8001bac <__retarget_lock_release_recursive>
 8001876:	4628      	mov	r0, r5
 8001878:	bd70      	pop	{r4, r5, r6, pc}
 800187a:	2b00      	cmp	r3, #0
 800187c:	da04      	bge.n	8001888 <_puts_r+0x60>
 800187e:	69a2      	ldr	r2, [r4, #24]
 8001880:	429a      	cmp	r2, r3
 8001882:	dc17      	bgt.n	80018b4 <_puts_r+0x8c>
 8001884:	290a      	cmp	r1, #10
 8001886:	d015      	beq.n	80018b4 <_puts_r+0x8c>
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	6022      	str	r2, [r4, #0]
 800188e:	7019      	strb	r1, [r3, #0]
 8001890:	68a3      	ldr	r3, [r4, #8]
 8001892:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001896:	3b01      	subs	r3, #1
 8001898:	60a3      	str	r3, [r4, #8]
 800189a:	2900      	cmp	r1, #0
 800189c:	d1ed      	bne.n	800187a <_puts_r+0x52>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da11      	bge.n	80018c6 <_puts_r+0x9e>
 80018a2:	4622      	mov	r2, r4
 80018a4:	210a      	movs	r1, #10
 80018a6:	4628      	mov	r0, r5
 80018a8:	f000 f871 	bl	800198e <__swbuf_r>
 80018ac:	3001      	adds	r0, #1
 80018ae:	d0d7      	beq.n	8001860 <_puts_r+0x38>
 80018b0:	250a      	movs	r5, #10
 80018b2:	e7d7      	b.n	8001864 <_puts_r+0x3c>
 80018b4:	4622      	mov	r2, r4
 80018b6:	4628      	mov	r0, r5
 80018b8:	f000 f869 	bl	800198e <__swbuf_r>
 80018bc:	3001      	adds	r0, #1
 80018be:	d1e7      	bne.n	8001890 <_puts_r+0x68>
 80018c0:	e7ce      	b.n	8001860 <_puts_r+0x38>
 80018c2:	3e01      	subs	r6, #1
 80018c4:	e7e4      	b.n	8001890 <_puts_r+0x68>
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	6022      	str	r2, [r4, #0]
 80018cc:	220a      	movs	r2, #10
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e7ee      	b.n	80018b0 <_puts_r+0x88>
	...

080018d4 <puts>:
 80018d4:	4b02      	ldr	r3, [pc, #8]	@ (80018e0 <puts+0xc>)
 80018d6:	4601      	mov	r1, r0
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f7ff bfa5 	b.w	8001828 <_puts_r>
 80018de:	bf00      	nop
 80018e0:	20000018 	.word	0x20000018

080018e4 <iscanf>:
 80018e4:	b40f      	push	{r0, r1, r2, r3}
 80018e6:	b507      	push	{r0, r1, r2, lr}
 80018e8:	4906      	ldr	r1, [pc, #24]	@ (8001904 <iscanf+0x20>)
 80018ea:	ab04      	add	r3, sp, #16
 80018ec:	6808      	ldr	r0, [r1, #0]
 80018ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80018f2:	6841      	ldr	r1, [r0, #4]
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	f000 fbef 	bl	80020d8 <_vfiscanf_r>
 80018fa:	b003      	add	sp, #12
 80018fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001900:	b004      	add	sp, #16
 8001902:	4770      	bx	lr
 8001904:	20000018 	.word	0x20000018

08001908 <__sread>:
 8001908:	b510      	push	{r4, lr}
 800190a:	460c      	mov	r4, r1
 800190c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001910:	f000 f8fc 	bl	8001b0c <_read_r>
 8001914:	2800      	cmp	r0, #0
 8001916:	bfab      	itete	ge
 8001918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800191a:	89a3      	ldrhlt	r3, [r4, #12]
 800191c:	181b      	addge	r3, r3, r0
 800191e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001922:	bfac      	ite	ge
 8001924:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001926:	81a3      	strhlt	r3, [r4, #12]
 8001928:	bd10      	pop	{r4, pc}

0800192a <__swrite>:
 800192a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800192e:	461f      	mov	r7, r3
 8001930:	898b      	ldrh	r3, [r1, #12]
 8001932:	05db      	lsls	r3, r3, #23
 8001934:	4605      	mov	r5, r0
 8001936:	460c      	mov	r4, r1
 8001938:	4616      	mov	r6, r2
 800193a:	d505      	bpl.n	8001948 <__swrite+0x1e>
 800193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001940:	2302      	movs	r3, #2
 8001942:	2200      	movs	r2, #0
 8001944:	f000 f8d0 	bl	8001ae8 <_lseek_r>
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800194e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001952:	81a3      	strh	r3, [r4, #12]
 8001954:	4632      	mov	r2, r6
 8001956:	463b      	mov	r3, r7
 8001958:	4628      	mov	r0, r5
 800195a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800195e:	f000 b8e7 	b.w	8001b30 <_write_r>

08001962 <__sseek>:
 8001962:	b510      	push	{r4, lr}
 8001964:	460c      	mov	r4, r1
 8001966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800196a:	f000 f8bd 	bl	8001ae8 <_lseek_r>
 800196e:	1c43      	adds	r3, r0, #1
 8001970:	89a3      	ldrh	r3, [r4, #12]
 8001972:	bf15      	itete	ne
 8001974:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800197a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800197e:	81a3      	strheq	r3, [r4, #12]
 8001980:	bf18      	it	ne
 8001982:	81a3      	strhne	r3, [r4, #12]
 8001984:	bd10      	pop	{r4, pc}

08001986 <__sclose>:
 8001986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198a:	f000 b89d 	b.w	8001ac8 <_close_r>

0800198e <__swbuf_r>:
 800198e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001990:	460e      	mov	r6, r1
 8001992:	4614      	mov	r4, r2
 8001994:	4605      	mov	r5, r0
 8001996:	b118      	cbz	r0, 80019a0 <__swbuf_r+0x12>
 8001998:	6a03      	ldr	r3, [r0, #32]
 800199a:	b90b      	cbnz	r3, 80019a0 <__swbuf_r+0x12>
 800199c:	f7ff ff0e 	bl	80017bc <__sinit>
 80019a0:	69a3      	ldr	r3, [r4, #24]
 80019a2:	60a3      	str	r3, [r4, #8]
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	071a      	lsls	r2, r3, #28
 80019a8:	d501      	bpl.n	80019ae <__swbuf_r+0x20>
 80019aa:	6923      	ldr	r3, [r4, #16]
 80019ac:	b943      	cbnz	r3, 80019c0 <__swbuf_r+0x32>
 80019ae:	4621      	mov	r1, r4
 80019b0:	4628      	mov	r0, r5
 80019b2:	f000 f82b 	bl	8001a0c <__swsetup_r>
 80019b6:	b118      	cbz	r0, 80019c0 <__swbuf_r+0x32>
 80019b8:	f04f 37ff 	mov.w	r7, #4294967295
 80019bc:	4638      	mov	r0, r7
 80019be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	6922      	ldr	r2, [r4, #16]
 80019c4:	1a98      	subs	r0, r3, r2
 80019c6:	6963      	ldr	r3, [r4, #20]
 80019c8:	b2f6      	uxtb	r6, r6
 80019ca:	4283      	cmp	r3, r0
 80019cc:	4637      	mov	r7, r6
 80019ce:	dc05      	bgt.n	80019dc <__swbuf_r+0x4e>
 80019d0:	4621      	mov	r1, r4
 80019d2:	4628      	mov	r0, r5
 80019d4:	f000 fd66 	bl	80024a4 <_fflush_r>
 80019d8:	2800      	cmp	r0, #0
 80019da:	d1ed      	bne.n	80019b8 <__swbuf_r+0x2a>
 80019dc:	68a3      	ldr	r3, [r4, #8]
 80019de:	3b01      	subs	r3, #1
 80019e0:	60a3      	str	r3, [r4, #8]
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	6022      	str	r2, [r4, #0]
 80019e8:	701e      	strb	r6, [r3, #0]
 80019ea:	6962      	ldr	r2, [r4, #20]
 80019ec:	1c43      	adds	r3, r0, #1
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d004      	beq.n	80019fc <__swbuf_r+0x6e>
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	07db      	lsls	r3, r3, #31
 80019f6:	d5e1      	bpl.n	80019bc <__swbuf_r+0x2e>
 80019f8:	2e0a      	cmp	r6, #10
 80019fa:	d1df      	bne.n	80019bc <__swbuf_r+0x2e>
 80019fc:	4621      	mov	r1, r4
 80019fe:	4628      	mov	r0, r5
 8001a00:	f000 fd50 	bl	80024a4 <_fflush_r>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d0d9      	beq.n	80019bc <__swbuf_r+0x2e>
 8001a08:	e7d6      	b.n	80019b8 <__swbuf_r+0x2a>
	...

08001a0c <__swsetup_r>:
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <__swsetup_r+0xa8>)
 8001a10:	4605      	mov	r5, r0
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	460c      	mov	r4, r1
 8001a16:	b118      	cbz	r0, 8001a20 <__swsetup_r+0x14>
 8001a18:	6a03      	ldr	r3, [r0, #32]
 8001a1a:	b90b      	cbnz	r3, 8001a20 <__swsetup_r+0x14>
 8001a1c:	f7ff fece 	bl	80017bc <__sinit>
 8001a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a24:	0719      	lsls	r1, r3, #28
 8001a26:	d422      	bmi.n	8001a6e <__swsetup_r+0x62>
 8001a28:	06da      	lsls	r2, r3, #27
 8001a2a:	d407      	bmi.n	8001a3c <__swsetup_r+0x30>
 8001a2c:	2209      	movs	r2, #9
 8001a2e:	602a      	str	r2, [r5, #0]
 8001a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a34:	81a3      	strh	r3, [r4, #12]
 8001a36:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3a:	e033      	b.n	8001aa4 <__swsetup_r+0x98>
 8001a3c:	0758      	lsls	r0, r3, #29
 8001a3e:	d512      	bpl.n	8001a66 <__swsetup_r+0x5a>
 8001a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a42:	b141      	cbz	r1, 8001a56 <__swsetup_r+0x4a>
 8001a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a48:	4299      	cmp	r1, r3
 8001a4a:	d002      	beq.n	8001a52 <__swsetup_r+0x46>
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 f8af 	bl	8001bb0 <_free_r>
 8001a52:	2300      	movs	r3, #0
 8001a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a56:	89a3      	ldrh	r3, [r4, #12]
 8001a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a5c:	81a3      	strh	r3, [r4, #12]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	6063      	str	r3, [r4, #4]
 8001a62:	6923      	ldr	r3, [r4, #16]
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	89a3      	ldrh	r3, [r4, #12]
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	81a3      	strh	r3, [r4, #12]
 8001a6e:	6923      	ldr	r3, [r4, #16]
 8001a70:	b94b      	cbnz	r3, 8001a86 <__swsetup_r+0x7a>
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a7c:	d003      	beq.n	8001a86 <__swsetup_r+0x7a>
 8001a7e:	4621      	mov	r1, r4
 8001a80:	4628      	mov	r0, r5
 8001a82:	f000 fd5d 	bl	8002540 <__smakebuf_r>
 8001a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a8a:	f013 0201 	ands.w	r2, r3, #1
 8001a8e:	d00a      	beq.n	8001aa6 <__swsetup_r+0x9a>
 8001a90:	2200      	movs	r2, #0
 8001a92:	60a2      	str	r2, [r4, #8]
 8001a94:	6962      	ldr	r2, [r4, #20]
 8001a96:	4252      	negs	r2, r2
 8001a98:	61a2      	str	r2, [r4, #24]
 8001a9a:	6922      	ldr	r2, [r4, #16]
 8001a9c:	b942      	cbnz	r2, 8001ab0 <__swsetup_r+0xa4>
 8001a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001aa2:	d1c5      	bne.n	8001a30 <__swsetup_r+0x24>
 8001aa4:	bd38      	pop	{r3, r4, r5, pc}
 8001aa6:	0799      	lsls	r1, r3, #30
 8001aa8:	bf58      	it	pl
 8001aaa:	6962      	ldrpl	r2, [r4, #20]
 8001aac:	60a2      	str	r2, [r4, #8]
 8001aae:	e7f4      	b.n	8001a9a <__swsetup_r+0x8e>
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	e7f7      	b.n	8001aa4 <__swsetup_r+0x98>
 8001ab4:	20000018 	.word	0x20000018

08001ab8 <memset>:
 8001ab8:	4402      	add	r2, r0
 8001aba:	4603      	mov	r3, r0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <memset+0xa>
 8001ac0:	4770      	bx	lr
 8001ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ac6:	e7f9      	b.n	8001abc <memset+0x4>

08001ac8 <_close_r>:
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4d06      	ldr	r5, [pc, #24]	@ (8001ae4 <_close_r+0x1c>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	602b      	str	r3, [r5, #0]
 8001ad4:	f7fe fdba 	bl	800064c <_close>
 8001ad8:	1c43      	adds	r3, r0, #1
 8001ada:	d102      	bne.n	8001ae2 <_close_r+0x1a>
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	b103      	cbz	r3, 8001ae2 <_close_r+0x1a>
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
 8001ae4:	200001c8 	.word	0x200001c8

08001ae8 <_lseek_r>:
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	4d07      	ldr	r5, [pc, #28]	@ (8001b08 <_lseek_r+0x20>)
 8001aec:	4604      	mov	r4, r0
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	602a      	str	r2, [r5, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f7fe fdcf 	bl	800069a <_lseek>
 8001afc:	1c43      	adds	r3, r0, #1
 8001afe:	d102      	bne.n	8001b06 <_lseek_r+0x1e>
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	b103      	cbz	r3, 8001b06 <_lseek_r+0x1e>
 8001b04:	6023      	str	r3, [r4, #0]
 8001b06:	bd38      	pop	{r3, r4, r5, pc}
 8001b08:	200001c8 	.word	0x200001c8

08001b0c <_read_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4d07      	ldr	r5, [pc, #28]	@ (8001b2c <_read_r+0x20>)
 8001b10:	4604      	mov	r4, r0
 8001b12:	4608      	mov	r0, r1
 8001b14:	4611      	mov	r1, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	602a      	str	r2, [r5, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f7fe fd5d 	bl	80005da <_read>
 8001b20:	1c43      	adds	r3, r0, #1
 8001b22:	d102      	bne.n	8001b2a <_read_r+0x1e>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	b103      	cbz	r3, 8001b2a <_read_r+0x1e>
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
 8001b2c:	200001c8 	.word	0x200001c8

08001b30 <_write_r>:
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4d07      	ldr	r5, [pc, #28]	@ (8001b50 <_write_r+0x20>)
 8001b34:	4604      	mov	r4, r0
 8001b36:	4608      	mov	r0, r1
 8001b38:	4611      	mov	r1, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	602a      	str	r2, [r5, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f7fe fd68 	bl	8000614 <_write>
 8001b44:	1c43      	adds	r3, r0, #1
 8001b46:	d102      	bne.n	8001b4e <_write_r+0x1e>
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	b103      	cbz	r3, 8001b4e <_write_r+0x1e>
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	200001c8 	.word	0x200001c8

08001b54 <__errno>:
 8001b54:	4b01      	ldr	r3, [pc, #4]	@ (8001b5c <__errno+0x8>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000018 	.word	0x20000018

08001b60 <__libc_init_array>:
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	4d0d      	ldr	r5, [pc, #52]	@ (8001b98 <__libc_init_array+0x38>)
 8001b64:	4c0d      	ldr	r4, [pc, #52]	@ (8001b9c <__libc_init_array+0x3c>)
 8001b66:	1b64      	subs	r4, r4, r5
 8001b68:	10a4      	asrs	r4, r4, #2
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	42a6      	cmp	r6, r4
 8001b6e:	d109      	bne.n	8001b84 <__libc_init_array+0x24>
 8001b70:	4d0b      	ldr	r5, [pc, #44]	@ (8001ba0 <__libc_init_array+0x40>)
 8001b72:	4c0c      	ldr	r4, [pc, #48]	@ (8001ba4 <__libc_init_array+0x44>)
 8001b74:	f000 fff6 	bl	8002b64 <_init>
 8001b78:	1b64      	subs	r4, r4, r5
 8001b7a:	10a4      	asrs	r4, r4, #2
 8001b7c:	2600      	movs	r6, #0
 8001b7e:	42a6      	cmp	r6, r4
 8001b80:	d105      	bne.n	8001b8e <__libc_init_array+0x2e>
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b88:	4798      	blx	r3
 8001b8a:	3601      	adds	r6, #1
 8001b8c:	e7ee      	b.n	8001b6c <__libc_init_array+0xc>
 8001b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b92:	4798      	blx	r3
 8001b94:	3601      	adds	r6, #1
 8001b96:	e7f2      	b.n	8001b7e <__libc_init_array+0x1e>
 8001b98:	08002d04 	.word	0x08002d04
 8001b9c:	08002d04 	.word	0x08002d04
 8001ba0:	08002d04 	.word	0x08002d04
 8001ba4:	08002d08 	.word	0x08002d08

08001ba8 <__retarget_lock_init_recursive>:
 8001ba8:	4770      	bx	lr

08001baa <__retarget_lock_acquire_recursive>:
 8001baa:	4770      	bx	lr

08001bac <__retarget_lock_release_recursive>:
 8001bac:	4770      	bx	lr
	...

08001bb0 <_free_r>:
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	4605      	mov	r5, r0
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	d041      	beq.n	8001c3c <_free_r+0x8c>
 8001bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bbc:	1f0c      	subs	r4, r1, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bfb8      	it	lt
 8001bc2:	18e4      	addlt	r4, r4, r3
 8001bc4:	f000 f8e0 	bl	8001d88 <__malloc_lock>
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <_free_r+0x90>)
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	b933      	cbnz	r3, 8001bdc <_free_r+0x2c>
 8001bce:	6063      	str	r3, [r4, #4]
 8001bd0:	6014      	str	r4, [r2, #0]
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bd8:	f000 b8dc 	b.w	8001d94 <__malloc_unlock>
 8001bdc:	42a3      	cmp	r3, r4
 8001bde:	d908      	bls.n	8001bf2 <_free_r+0x42>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	1821      	adds	r1, r4, r0
 8001be4:	428b      	cmp	r3, r1
 8001be6:	bf01      	itttt	eq
 8001be8:	6819      	ldreq	r1, [r3, #0]
 8001bea:	685b      	ldreq	r3, [r3, #4]
 8001bec:	1809      	addeq	r1, r1, r0
 8001bee:	6021      	streq	r1, [r4, #0]
 8001bf0:	e7ed      	b.n	8001bce <_free_r+0x1e>
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	b10b      	cbz	r3, 8001bfc <_free_r+0x4c>
 8001bf8:	42a3      	cmp	r3, r4
 8001bfa:	d9fa      	bls.n	8001bf2 <_free_r+0x42>
 8001bfc:	6811      	ldr	r1, [r2, #0]
 8001bfe:	1850      	adds	r0, r2, r1
 8001c00:	42a0      	cmp	r0, r4
 8001c02:	d10b      	bne.n	8001c1c <_free_r+0x6c>
 8001c04:	6820      	ldr	r0, [r4, #0]
 8001c06:	4401      	add	r1, r0
 8001c08:	1850      	adds	r0, r2, r1
 8001c0a:	4283      	cmp	r3, r0
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	d1e0      	bne.n	8001bd2 <_free_r+0x22>
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	6053      	str	r3, [r2, #4]
 8001c16:	4408      	add	r0, r1
 8001c18:	6010      	str	r0, [r2, #0]
 8001c1a:	e7da      	b.n	8001bd2 <_free_r+0x22>
 8001c1c:	d902      	bls.n	8001c24 <_free_r+0x74>
 8001c1e:	230c      	movs	r3, #12
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	e7d6      	b.n	8001bd2 <_free_r+0x22>
 8001c24:	6820      	ldr	r0, [r4, #0]
 8001c26:	1821      	adds	r1, r4, r0
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	bf04      	itt	eq
 8001c2c:	6819      	ldreq	r1, [r3, #0]
 8001c2e:	685b      	ldreq	r3, [r3, #4]
 8001c30:	6063      	str	r3, [r4, #4]
 8001c32:	bf04      	itt	eq
 8001c34:	1809      	addeq	r1, r1, r0
 8001c36:	6021      	streq	r1, [r4, #0]
 8001c38:	6054      	str	r4, [r2, #4]
 8001c3a:	e7ca      	b.n	8001bd2 <_free_r+0x22>
 8001c3c:	bd38      	pop	{r3, r4, r5, pc}
 8001c3e:	bf00      	nop
 8001c40:	200001d4 	.word	0x200001d4

08001c44 <sbrk_aligned>:
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4e0f      	ldr	r6, [pc, #60]	@ (8001c84 <sbrk_aligned+0x40>)
 8001c48:	460c      	mov	r4, r1
 8001c4a:	6831      	ldr	r1, [r6, #0]
 8001c4c:	4605      	mov	r5, r0
 8001c4e:	b911      	cbnz	r1, 8001c56 <sbrk_aligned+0x12>
 8001c50:	f000 fe48 	bl	80028e4 <_sbrk_r>
 8001c54:	6030      	str	r0, [r6, #0]
 8001c56:	4621      	mov	r1, r4
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f000 fe43 	bl	80028e4 <_sbrk_r>
 8001c5e:	1c43      	adds	r3, r0, #1
 8001c60:	d103      	bne.n	8001c6a <sbrk_aligned+0x26>
 8001c62:	f04f 34ff 	mov.w	r4, #4294967295
 8001c66:	4620      	mov	r0, r4
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
 8001c6a:	1cc4      	adds	r4, r0, #3
 8001c6c:	f024 0403 	bic.w	r4, r4, #3
 8001c70:	42a0      	cmp	r0, r4
 8001c72:	d0f8      	beq.n	8001c66 <sbrk_aligned+0x22>
 8001c74:	1a21      	subs	r1, r4, r0
 8001c76:	4628      	mov	r0, r5
 8001c78:	f000 fe34 	bl	80028e4 <_sbrk_r>
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	d1f2      	bne.n	8001c66 <sbrk_aligned+0x22>
 8001c80:	e7ef      	b.n	8001c62 <sbrk_aligned+0x1e>
 8001c82:	bf00      	nop
 8001c84:	200001d0 	.word	0x200001d0

08001c88 <_malloc_r>:
 8001c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c8c:	1ccd      	adds	r5, r1, #3
 8001c8e:	f025 0503 	bic.w	r5, r5, #3
 8001c92:	3508      	adds	r5, #8
 8001c94:	2d0c      	cmp	r5, #12
 8001c96:	bf38      	it	cc
 8001c98:	250c      	movcc	r5, #12
 8001c9a:	2d00      	cmp	r5, #0
 8001c9c:	4606      	mov	r6, r0
 8001c9e:	db01      	blt.n	8001ca4 <_malloc_r+0x1c>
 8001ca0:	42a9      	cmp	r1, r5
 8001ca2:	d904      	bls.n	8001cae <_malloc_r+0x26>
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6033      	str	r3, [r6, #0]
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d84 <_malloc_r+0xfc>
 8001cb2:	f000 f869 	bl	8001d88 <__malloc_lock>
 8001cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8001cba:	461c      	mov	r4, r3
 8001cbc:	bb44      	cbnz	r4, 8001d10 <_malloc_r+0x88>
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f7ff ffbf 	bl	8001c44 <sbrk_aligned>
 8001cc6:	1c43      	adds	r3, r0, #1
 8001cc8:	4604      	mov	r4, r0
 8001cca:	d158      	bne.n	8001d7e <_malloc_r+0xf6>
 8001ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8001cd0:	4627      	mov	r7, r4
 8001cd2:	2f00      	cmp	r7, #0
 8001cd4:	d143      	bne.n	8001d5e <_malloc_r+0xd6>
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d04b      	beq.n	8001d72 <_malloc_r+0xea>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	4639      	mov	r1, r7
 8001cde:	4630      	mov	r0, r6
 8001ce0:	eb04 0903 	add.w	r9, r4, r3
 8001ce4:	f000 fdfe 	bl	80028e4 <_sbrk_r>
 8001ce8:	4581      	cmp	r9, r0
 8001cea:	d142      	bne.n	8001d72 <_malloc_r+0xea>
 8001cec:	6821      	ldr	r1, [r4, #0]
 8001cee:	1a6d      	subs	r5, r5, r1
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f7ff ffa6 	bl	8001c44 <sbrk_aligned>
 8001cf8:	3001      	adds	r0, #1
 8001cfa:	d03a      	beq.n	8001d72 <_malloc_r+0xea>
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	442b      	add	r3, r5
 8001d00:	6023      	str	r3, [r4, #0]
 8001d02:	f8d8 3000 	ldr.w	r3, [r8]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	bb62      	cbnz	r2, 8001d64 <_malloc_r+0xdc>
 8001d0a:	f8c8 7000 	str.w	r7, [r8]
 8001d0e:	e00f      	b.n	8001d30 <_malloc_r+0xa8>
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	1b52      	subs	r2, r2, r5
 8001d14:	d420      	bmi.n	8001d58 <_malloc_r+0xd0>
 8001d16:	2a0b      	cmp	r2, #11
 8001d18:	d917      	bls.n	8001d4a <_malloc_r+0xc2>
 8001d1a:	1961      	adds	r1, r4, r5
 8001d1c:	42a3      	cmp	r3, r4
 8001d1e:	6025      	str	r5, [r4, #0]
 8001d20:	bf18      	it	ne
 8001d22:	6059      	strne	r1, [r3, #4]
 8001d24:	6863      	ldr	r3, [r4, #4]
 8001d26:	bf08      	it	eq
 8001d28:	f8c8 1000 	streq.w	r1, [r8]
 8001d2c:	5162      	str	r2, [r4, r5]
 8001d2e:	604b      	str	r3, [r1, #4]
 8001d30:	4630      	mov	r0, r6
 8001d32:	f000 f82f 	bl	8001d94 <__malloc_unlock>
 8001d36:	f104 000b 	add.w	r0, r4, #11
 8001d3a:	1d23      	adds	r3, r4, #4
 8001d3c:	f020 0007 	bic.w	r0, r0, #7
 8001d40:	1ac2      	subs	r2, r0, r3
 8001d42:	bf1c      	itt	ne
 8001d44:	1a1b      	subne	r3, r3, r0
 8001d46:	50a3      	strne	r3, [r4, r2]
 8001d48:	e7af      	b.n	8001caa <_malloc_r+0x22>
 8001d4a:	6862      	ldr	r2, [r4, #4]
 8001d4c:	42a3      	cmp	r3, r4
 8001d4e:	bf0c      	ite	eq
 8001d50:	f8c8 2000 	streq.w	r2, [r8]
 8001d54:	605a      	strne	r2, [r3, #4]
 8001d56:	e7eb      	b.n	8001d30 <_malloc_r+0xa8>
 8001d58:	4623      	mov	r3, r4
 8001d5a:	6864      	ldr	r4, [r4, #4]
 8001d5c:	e7ae      	b.n	8001cbc <_malloc_r+0x34>
 8001d5e:	463c      	mov	r4, r7
 8001d60:	687f      	ldr	r7, [r7, #4]
 8001d62:	e7b6      	b.n	8001cd2 <_malloc_r+0x4a>
 8001d64:	461a      	mov	r2, r3
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	42a3      	cmp	r3, r4
 8001d6a:	d1fb      	bne.n	8001d64 <_malloc_r+0xdc>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6053      	str	r3, [r2, #4]
 8001d70:	e7de      	b.n	8001d30 <_malloc_r+0xa8>
 8001d72:	230c      	movs	r3, #12
 8001d74:	6033      	str	r3, [r6, #0]
 8001d76:	4630      	mov	r0, r6
 8001d78:	f000 f80c 	bl	8001d94 <__malloc_unlock>
 8001d7c:	e794      	b.n	8001ca8 <_malloc_r+0x20>
 8001d7e:	6005      	str	r5, [r0, #0]
 8001d80:	e7d6      	b.n	8001d30 <_malloc_r+0xa8>
 8001d82:	bf00      	nop
 8001d84:	200001d4 	.word	0x200001d4

08001d88 <__malloc_lock>:
 8001d88:	4801      	ldr	r0, [pc, #4]	@ (8001d90 <__malloc_lock+0x8>)
 8001d8a:	f7ff bf0e 	b.w	8001baa <__retarget_lock_acquire_recursive>
 8001d8e:	bf00      	nop
 8001d90:	200001cc 	.word	0x200001cc

08001d94 <__malloc_unlock>:
 8001d94:	4801      	ldr	r0, [pc, #4]	@ (8001d9c <__malloc_unlock+0x8>)
 8001d96:	f7ff bf09 	b.w	8001bac <__retarget_lock_release_recursive>
 8001d9a:	bf00      	nop
 8001d9c:	200001cc 	.word	0x200001cc

08001da0 <__svfiscanf_r>:
 8001da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001da4:	461d      	mov	r5, r3
 8001da6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8001da8:	07df      	lsls	r7, r3, #31
 8001daa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001dae:	4606      	mov	r6, r0
 8001db0:	460c      	mov	r4, r1
 8001db2:	4691      	mov	r9, r2
 8001db4:	d405      	bmi.n	8001dc2 <__svfiscanf_r+0x22>
 8001db6:	898b      	ldrh	r3, [r1, #12]
 8001db8:	0598      	lsls	r0, r3, #22
 8001dba:	d402      	bmi.n	8001dc2 <__svfiscanf_r+0x22>
 8001dbc:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8001dbe:	f7ff fef4 	bl	8001baa <__retarget_lock_acquire_recursive>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8001dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8002068 <__svfiscanf_r+0x2c8>)
 8001dca:	93a0      	str	r3, [sp, #640]	@ 0x280
 8001dcc:	f10d 0804 	add.w	r8, sp, #4
 8001dd0:	4ba6      	ldr	r3, [pc, #664]	@ (800206c <__svfiscanf_r+0x2cc>)
 8001dd2:	4fa7      	ldr	r7, [pc, #668]	@ (8002070 <__svfiscanf_r+0x2d0>)
 8001dd4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8001dd8:	93a1      	str	r3, [sp, #644]	@ 0x284
 8001dda:	9500      	str	r5, [sp, #0]
 8001ddc:	f899 3000 	ldrb.w	r3, [r9]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 816c 	beq.w	80020be <__svfiscanf_r+0x31e>
 8001de6:	5cf9      	ldrb	r1, [r7, r3]
 8001de8:	f011 0108 	ands.w	r1, r1, #8
 8001dec:	f109 0501 	add.w	r5, r9, #1
 8001df0:	d019      	beq.n	8001e26 <__svfiscanf_r+0x86>
 8001df2:	6863      	ldr	r3, [r4, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dd0f      	ble.n	8001e18 <__svfiscanf_r+0x78>
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	5cba      	ldrb	r2, [r7, r2]
 8001dfe:	0711      	lsls	r1, r2, #28
 8001e00:	d401      	bmi.n	8001e06 <__svfiscanf_r+0x66>
 8001e02:	46a9      	mov	r9, r5
 8001e04:	e7ea      	b.n	8001ddc <__svfiscanf_r+0x3c>
 8001e06:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8001e08:	3201      	adds	r2, #1
 8001e0a:	9245      	str	r2, [sp, #276]	@ 0x114
 8001e0c:	6862      	ldr	r2, [r4, #4]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	3a01      	subs	r2, #1
 8001e12:	6062      	str	r2, [r4, #4]
 8001e14:	6023      	str	r3, [r4, #0]
 8001e16:	e7ec      	b.n	8001df2 <__svfiscanf_r+0x52>
 8001e18:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	4798      	blx	r3
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d0e9      	beq.n	8001df8 <__svfiscanf_r+0x58>
 8001e24:	e7ed      	b.n	8001e02 <__svfiscanf_r+0x62>
 8001e26:	2b25      	cmp	r3, #37	@ 0x25
 8001e28:	d012      	beq.n	8001e50 <__svfiscanf_r+0xb0>
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f340 8095 	ble.w	8001f5e <__svfiscanf_r+0x1be>
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	7813      	ldrb	r3, [r2, #0]
 8001e38:	454b      	cmp	r3, r9
 8001e3a:	f040 8140 	bne.w	80020be <__svfiscanf_r+0x31e>
 8001e3e:	6863      	ldr	r3, [r4, #4]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	6063      	str	r3, [r4, #4]
 8001e44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8001e46:	3201      	adds	r2, #1
 8001e48:	3301      	adds	r3, #1
 8001e4a:	6022      	str	r2, [r4, #0]
 8001e4c:	9345      	str	r3, [sp, #276]	@ 0x114
 8001e4e:	e7d8      	b.n	8001e02 <__svfiscanf_r+0x62>
 8001e50:	9141      	str	r1, [sp, #260]	@ 0x104
 8001e52:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001e54:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e5a:	bf02      	ittt	eq
 8001e5c:	2310      	moveq	r3, #16
 8001e5e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001e60:	f109 0502 	addeq.w	r5, r9, #2
 8001e64:	220a      	movs	r2, #10
 8001e66:	46a9      	mov	r9, r5
 8001e68:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001e6c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d91f      	bls.n	8001eb4 <__svfiscanf_r+0x114>
 8001e74:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8002074 <__svfiscanf_r+0x2d4>
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4650      	mov	r0, sl
 8001e7c:	f7fe f9a8 	bl	80001d0 <memchr>
 8001e80:	b138      	cbz	r0, 8001e92 <__svfiscanf_r+0xf2>
 8001e82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001e84:	eba0 000a 	sub.w	r0, r0, sl
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4083      	lsls	r3, r0
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8001e90:	464d      	mov	r5, r9
 8001e92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e96:	2b78      	cmp	r3, #120	@ 0x78
 8001e98:	d807      	bhi.n	8001eaa <__svfiscanf_r+0x10a>
 8001e9a:	2b57      	cmp	r3, #87	@ 0x57
 8001e9c:	d811      	bhi.n	8001ec2 <__svfiscanf_r+0x122>
 8001e9e:	2b25      	cmp	r3, #37	@ 0x25
 8001ea0:	d0c3      	beq.n	8001e2a <__svfiscanf_r+0x8a>
 8001ea2:	d857      	bhi.n	8001f54 <__svfiscanf_r+0x1b4>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80c1 	beq.w	800202c <__svfiscanf_r+0x28c>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001eae:	230a      	movs	r3, #10
 8001eb0:	9342      	str	r3, [sp, #264]	@ 0x108
 8001eb2:	e07e      	b.n	8001fb2 <__svfiscanf_r+0x212>
 8001eb4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8001eb6:	fb02 1103 	mla	r1, r2, r3, r1
 8001eba:	3930      	subs	r1, #48	@ 0x30
 8001ebc:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001ebe:	464d      	mov	r5, r9
 8001ec0:	e7d1      	b.n	8001e66 <__svfiscanf_r+0xc6>
 8001ec2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8001ec6:	2a20      	cmp	r2, #32
 8001ec8:	d8ef      	bhi.n	8001eaa <__svfiscanf_r+0x10a>
 8001eca:	a101      	add	r1, pc, #4	@ (adr r1, 8001ed0 <__svfiscanf_r+0x130>)
 8001ecc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001ed0:	08001f91 	.word	0x08001f91
 8001ed4:	08001eab 	.word	0x08001eab
 8001ed8:	08001eab 	.word	0x08001eab
 8001edc:	08001feb 	.word	0x08001feb
 8001ee0:	08001eab 	.word	0x08001eab
 8001ee4:	08001eab 	.word	0x08001eab
 8001ee8:	08001eab 	.word	0x08001eab
 8001eec:	08001eab 	.word	0x08001eab
 8001ef0:	08001eab 	.word	0x08001eab
 8001ef4:	08001eab 	.word	0x08001eab
 8001ef8:	08001eab 	.word	0x08001eab
 8001efc:	08002001 	.word	0x08002001
 8001f00:	08001fe7 	.word	0x08001fe7
 8001f04:	08001f5b 	.word	0x08001f5b
 8001f08:	08001f5b 	.word	0x08001f5b
 8001f0c:	08001f5b 	.word	0x08001f5b
 8001f10:	08001eab 	.word	0x08001eab
 8001f14:	08001fa3 	.word	0x08001fa3
 8001f18:	08001eab 	.word	0x08001eab
 8001f1c:	08001eab 	.word	0x08001eab
 8001f20:	08001eab 	.word	0x08001eab
 8001f24:	08001eab 	.word	0x08001eab
 8001f28:	08002011 	.word	0x08002011
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001f89 	.word	0x08001f89
 8001f34:	08001eab 	.word	0x08001eab
 8001f38:	08001eab 	.word	0x08001eab
 8001f3c:	0800200d 	.word	0x0800200d
 8001f40:	08001eab 	.word	0x08001eab
 8001f44:	08001fe7 	.word	0x08001fe7
 8001f48:	08001eab 	.word	0x08001eab
 8001f4c:	08001eab 	.word	0x08001eab
 8001f50:	08001f91 	.word	0x08001f91
 8001f54:	3b45      	subs	r3, #69	@ 0x45
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d8a7      	bhi.n	8001eaa <__svfiscanf_r+0x10a>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e028      	b.n	8001fb0 <__svfiscanf_r+0x210>
 8001f5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001f60:	4621      	mov	r1, r4
 8001f62:	4630      	mov	r0, r6
 8001f64:	4798      	blx	r3
 8001f66:	2800      	cmp	r0, #0
 8001f68:	f43f af64 	beq.w	8001e34 <__svfiscanf_r+0x94>
 8001f6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f6e:	07da      	lsls	r2, r3, #31
 8001f70:	f140 809d 	bpl.w	80020ae <__svfiscanf_r+0x30e>
 8001f74:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d061      	beq.n	800203e <__svfiscanf_r+0x29e>
 8001f7a:	89a3      	ldrh	r3, [r4, #12]
 8001f7c:	0659      	lsls	r1, r3, #25
 8001f7e:	d45e      	bmi.n	800203e <__svfiscanf_r+0x29e>
 8001f80:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8001f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f88:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
 8001f8e:	9241      	str	r2, [sp, #260]	@ 0x104
 8001f90:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f96:	9241      	str	r2, [sp, #260]	@ 0x104
 8001f98:	2210      	movs	r2, #16
 8001f9a:	2b6e      	cmp	r3, #110	@ 0x6e
 8001f9c:	9242      	str	r2, [sp, #264]	@ 0x108
 8001f9e:	d902      	bls.n	8001fa6 <__svfiscanf_r+0x206>
 8001fa0:	e005      	b.n	8001fae <__svfiscanf_r+0x20e>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9342      	str	r3, [sp, #264]	@ 0x108
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e002      	b.n	8001fb0 <__svfiscanf_r+0x210>
 8001faa:	2308      	movs	r3, #8
 8001fac:	9342      	str	r3, [sp, #264]	@ 0x108
 8001fae:	2304      	movs	r3, #4
 8001fb0:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dd45      	ble.n	8002044 <__svfiscanf_r+0x2a4>
 8001fb8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001fba:	0659      	lsls	r1, r3, #25
 8001fbc:	d404      	bmi.n	8001fc8 <__svfiscanf_r+0x228>
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	5cba      	ldrb	r2, [r7, r2]
 8001fc4:	0712      	lsls	r2, r2, #28
 8001fc6:	d444      	bmi.n	8002052 <__svfiscanf_r+0x2b2>
 8001fc8:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	dc5b      	bgt.n	8002086 <__svfiscanf_r+0x2e6>
 8001fce:	466b      	mov	r3, sp
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	a941      	add	r1, sp, #260	@ 0x104
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	f000 f893 	bl	8002100 <_scanf_chars>
 8001fda:	2801      	cmp	r0, #1
 8001fdc:	d06f      	beq.n	80020be <__svfiscanf_r+0x31e>
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	f47f af0f 	bne.w	8001e02 <__svfiscanf_r+0x62>
 8001fe4:	e7c2      	b.n	8001f6c <__svfiscanf_r+0x1cc>
 8001fe6:	220a      	movs	r2, #10
 8001fe8:	e7d7      	b.n	8001f9a <__svfiscanf_r+0x1fa>
 8001fea:	4629      	mov	r1, r5
 8001fec:	4640      	mov	r0, r8
 8001fee:	f000 fb65 	bl	80026bc <__sccl>
 8001ff2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff8:	9341      	str	r3, [sp, #260]	@ 0x104
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e7d7      	b.n	8001fb0 <__svfiscanf_r+0x210>
 8002000:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002006:	9341      	str	r3, [sp, #260]	@ 0x104
 8002008:	2300      	movs	r3, #0
 800200a:	e7d1      	b.n	8001fb0 <__svfiscanf_r+0x210>
 800200c:	2302      	movs	r3, #2
 800200e:	e7cf      	b.n	8001fb0 <__svfiscanf_r+0x210>
 8002010:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8002012:	06c3      	lsls	r3, r0, #27
 8002014:	f53f aef5 	bmi.w	8001e02 <__svfiscanf_r+0x62>
 8002018:	9b00      	ldr	r3, [sp, #0]
 800201a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800201c:	1d19      	adds	r1, r3, #4
 800201e:	9100      	str	r1, [sp, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	07c0      	lsls	r0, r0, #31
 8002024:	bf4c      	ite	mi
 8002026:	801a      	strhmi	r2, [r3, #0]
 8002028:	601a      	strpl	r2, [r3, #0]
 800202a:	e6ea      	b.n	8001e02 <__svfiscanf_r+0x62>
 800202c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800202e:	07de      	lsls	r6, r3, #31
 8002030:	d405      	bmi.n	800203e <__svfiscanf_r+0x29e>
 8002032:	89a3      	ldrh	r3, [r4, #12]
 8002034:	059d      	lsls	r5, r3, #22
 8002036:	d402      	bmi.n	800203e <__svfiscanf_r+0x29e>
 8002038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800203a:	f7ff fdb7 	bl	8001bac <__retarget_lock_release_recursive>
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	e79d      	b.n	8001f80 <__svfiscanf_r+0x1e0>
 8002044:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002046:	4621      	mov	r1, r4
 8002048:	4630      	mov	r0, r6
 800204a:	4798      	blx	r3
 800204c:	2800      	cmp	r0, #0
 800204e:	d0b3      	beq.n	8001fb8 <__svfiscanf_r+0x218>
 8002050:	e78c      	b.n	8001f6c <__svfiscanf_r+0x1cc>
 8002052:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002054:	3201      	adds	r2, #1
 8002056:	9245      	str	r2, [sp, #276]	@ 0x114
 8002058:	6862      	ldr	r2, [r4, #4]
 800205a:	3a01      	subs	r2, #1
 800205c:	2a00      	cmp	r2, #0
 800205e:	6062      	str	r2, [r4, #4]
 8002060:	dd0a      	ble.n	8002078 <__svfiscanf_r+0x2d8>
 8002062:	3301      	adds	r3, #1
 8002064:	6023      	str	r3, [r4, #0]
 8002066:	e7aa      	b.n	8001fbe <__svfiscanf_r+0x21e>
 8002068:	080027a3 	.word	0x080027a3
 800206c:	080025d5 	.word	0x080025d5
 8002070:	08002bfc 	.word	0x08002bfc
 8002074:	08002bdc 	.word	0x08002bdc
 8002078:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800207a:	4621      	mov	r1, r4
 800207c:	4630      	mov	r0, r6
 800207e:	4798      	blx	r3
 8002080:	2800      	cmp	r0, #0
 8002082:	d09c      	beq.n	8001fbe <__svfiscanf_r+0x21e>
 8002084:	e772      	b.n	8001f6c <__svfiscanf_r+0x1cc>
 8002086:	2b04      	cmp	r3, #4
 8002088:	dc06      	bgt.n	8002098 <__svfiscanf_r+0x2f8>
 800208a:	466b      	mov	r3, sp
 800208c:	4622      	mov	r2, r4
 800208e:	a941      	add	r1, sp, #260	@ 0x104
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f88f 	bl	80021b4 <_scanf_i>
 8002096:	e7a0      	b.n	8001fda <__svfiscanf_r+0x23a>
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <__svfiscanf_r+0x334>)
 800209a:	2b00      	cmp	r3, #0
 800209c:	f43f aeb1 	beq.w	8001e02 <__svfiscanf_r+0x62>
 80020a0:	466b      	mov	r3, sp
 80020a2:	4622      	mov	r2, r4
 80020a4:	a941      	add	r1, sp, #260	@ 0x104
 80020a6:	4630      	mov	r0, r6
 80020a8:	f3af 8000 	nop.w
 80020ac:	e795      	b.n	8001fda <__svfiscanf_r+0x23a>
 80020ae:	89a3      	ldrh	r3, [r4, #12]
 80020b0:	0598      	lsls	r0, r3, #22
 80020b2:	f53f af5f 	bmi.w	8001f74 <__svfiscanf_r+0x1d4>
 80020b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020b8:	f7ff fd78 	bl	8001bac <__retarget_lock_release_recursive>
 80020bc:	e75a      	b.n	8001f74 <__svfiscanf_r+0x1d4>
 80020be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020c0:	07da      	lsls	r2, r3, #31
 80020c2:	d405      	bmi.n	80020d0 <__svfiscanf_r+0x330>
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	059b      	lsls	r3, r3, #22
 80020c8:	d402      	bmi.n	80020d0 <__svfiscanf_r+0x330>
 80020ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020cc:	f7ff fd6e 	bl	8001bac <__retarget_lock_release_recursive>
 80020d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80020d2:	e755      	b.n	8001f80 <__svfiscanf_r+0x1e0>
 80020d4:	00000000 	.word	0x00000000

080020d8 <_vfiscanf_r>:
 80020d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020dc:	460d      	mov	r5, r1
 80020de:	4616      	mov	r6, r2
 80020e0:	461f      	mov	r7, r3
 80020e2:	4604      	mov	r4, r0
 80020e4:	b118      	cbz	r0, 80020ee <_vfiscanf_r+0x16>
 80020e6:	6a03      	ldr	r3, [r0, #32]
 80020e8:	b90b      	cbnz	r3, 80020ee <_vfiscanf_r+0x16>
 80020ea:	f7ff fb67 	bl	80017bc <__sinit>
 80020ee:	463b      	mov	r3, r7
 80020f0:	4632      	mov	r2, r6
 80020f2:	4629      	mov	r1, r5
 80020f4:	4620      	mov	r0, r4
 80020f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020fa:	f7ff be51 	b.w	8001da0 <__svfiscanf_r>
	...

08002100 <_scanf_chars>:
 8002100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002104:	4615      	mov	r5, r2
 8002106:	688a      	ldr	r2, [r1, #8]
 8002108:	4680      	mov	r8, r0
 800210a:	460c      	mov	r4, r1
 800210c:	b932      	cbnz	r2, 800211c <_scanf_chars+0x1c>
 800210e:	698a      	ldr	r2, [r1, #24]
 8002110:	2a00      	cmp	r2, #0
 8002112:	bf14      	ite	ne
 8002114:	f04f 32ff 	movne.w	r2, #4294967295
 8002118:	2201      	moveq	r2, #1
 800211a:	608a      	str	r2, [r1, #8]
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80021b0 <_scanf_chars+0xb0>
 8002122:	06d1      	lsls	r1, r2, #27
 8002124:	bf5f      	itttt	pl
 8002126:	681a      	ldrpl	r2, [r3, #0]
 8002128:	1d11      	addpl	r1, r2, #4
 800212a:	6019      	strpl	r1, [r3, #0]
 800212c:	6816      	ldrpl	r6, [r2, #0]
 800212e:	2700      	movs	r7, #0
 8002130:	69a0      	ldr	r0, [r4, #24]
 8002132:	b188      	cbz	r0, 8002158 <_scanf_chars+0x58>
 8002134:	2801      	cmp	r0, #1
 8002136:	d107      	bne.n	8002148 <_scanf_chars+0x48>
 8002138:	682b      	ldr	r3, [r5, #0]
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	6963      	ldr	r3, [r4, #20]
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	b953      	cbnz	r3, 8002158 <_scanf_chars+0x58>
 8002142:	2f00      	cmp	r7, #0
 8002144:	d031      	beq.n	80021aa <_scanf_chars+0xaa>
 8002146:	e022      	b.n	800218e <_scanf_chars+0x8e>
 8002148:	2802      	cmp	r0, #2
 800214a:	d120      	bne.n	800218e <_scanf_chars+0x8e>
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	d41a      	bmi.n	800218e <_scanf_chars+0x8e>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	06da      	lsls	r2, r3, #27
 800215c:	bf5e      	ittt	pl
 800215e:	682b      	ldrpl	r3, [r5, #0]
 8002160:	781b      	ldrbpl	r3, [r3, #0]
 8002162:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002166:	682a      	ldr	r2, [r5, #0]
 8002168:	686b      	ldr	r3, [r5, #4]
 800216a:	3201      	adds	r2, #1
 800216c:	602a      	str	r2, [r5, #0]
 800216e:	68a2      	ldr	r2, [r4, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	3a01      	subs	r2, #1
 8002174:	606b      	str	r3, [r5, #4]
 8002176:	3701      	adds	r7, #1
 8002178:	60a2      	str	r2, [r4, #8]
 800217a:	b142      	cbz	r2, 800218e <_scanf_chars+0x8e>
 800217c:	2b00      	cmp	r3, #0
 800217e:	dcd7      	bgt.n	8002130 <_scanf_chars+0x30>
 8002180:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002184:	4629      	mov	r1, r5
 8002186:	4640      	mov	r0, r8
 8002188:	4798      	blx	r3
 800218a:	2800      	cmp	r0, #0
 800218c:	d0d0      	beq.n	8002130 <_scanf_chars+0x30>
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	f013 0310 	ands.w	r3, r3, #16
 8002194:	d105      	bne.n	80021a2 <_scanf_chars+0xa2>
 8002196:	68e2      	ldr	r2, [r4, #12]
 8002198:	3201      	adds	r2, #1
 800219a:	60e2      	str	r2, [r4, #12]
 800219c:	69a2      	ldr	r2, [r4, #24]
 800219e:	b102      	cbz	r2, 80021a2 <_scanf_chars+0xa2>
 80021a0:	7033      	strb	r3, [r6, #0]
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	443b      	add	r3, r7
 80021a6:	6123      	str	r3, [r4, #16]
 80021a8:	2000      	movs	r0, #0
 80021aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021ae:	bf00      	nop
 80021b0:	08002bfc 	.word	0x08002bfc

080021b4 <_scanf_i>:
 80021b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b8:	4698      	mov	r8, r3
 80021ba:	4b74      	ldr	r3, [pc, #464]	@ (800238c <_scanf_i+0x1d8>)
 80021bc:	460c      	mov	r4, r1
 80021be:	4682      	mov	sl, r0
 80021c0:	4616      	mov	r6, r2
 80021c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021c6:	b087      	sub	sp, #28
 80021c8:	ab03      	add	r3, sp, #12
 80021ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021ce:	4b70      	ldr	r3, [pc, #448]	@ (8002390 <_scanf_i+0x1dc>)
 80021d0:	69a1      	ldr	r1, [r4, #24]
 80021d2:	4a70      	ldr	r2, [pc, #448]	@ (8002394 <_scanf_i+0x1e0>)
 80021d4:	2903      	cmp	r1, #3
 80021d6:	bf08      	it	eq
 80021d8:	461a      	moveq	r2, r3
 80021da:	68a3      	ldr	r3, [r4, #8]
 80021dc:	9201      	str	r2, [sp, #4]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80021e4:	bf88      	it	hi
 80021e6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80021ea:	4627      	mov	r7, r4
 80021ec:	bf82      	ittt	hi
 80021ee:	eb03 0905 	addhi.w	r9, r3, r5
 80021f2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80021f6:	60a3      	strhi	r3, [r4, #8]
 80021f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80021fc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8002200:	bf98      	it	ls
 8002202:	f04f 0900 	movls.w	r9, #0
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	463d      	mov	r5, r7
 800220a:	f04f 0b00 	mov.w	fp, #0
 800220e:	6831      	ldr	r1, [r6, #0]
 8002210:	ab03      	add	r3, sp, #12
 8002212:	7809      	ldrb	r1, [r1, #0]
 8002214:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002218:	2202      	movs	r2, #2
 800221a:	f7fd ffd9 	bl	80001d0 <memchr>
 800221e:	b328      	cbz	r0, 800226c <_scanf_i+0xb8>
 8002220:	f1bb 0f01 	cmp.w	fp, #1
 8002224:	d159      	bne.n	80022da <_scanf_i+0x126>
 8002226:	6862      	ldr	r2, [r4, #4]
 8002228:	b92a      	cbnz	r2, 8002236 <_scanf_i+0x82>
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	2108      	movs	r1, #8
 800222e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002232:	6061      	str	r1, [r4, #4]
 8002234:	6022      	str	r2, [r4, #0]
 8002236:	6822      	ldr	r2, [r4, #0]
 8002238:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800223c:	6022      	str	r2, [r4, #0]
 800223e:	68a2      	ldr	r2, [r4, #8]
 8002240:	1e51      	subs	r1, r2, #1
 8002242:	60a1      	str	r1, [r4, #8]
 8002244:	b192      	cbz	r2, 800226c <_scanf_i+0xb8>
 8002246:	6832      	ldr	r2, [r6, #0]
 8002248:	1c51      	adds	r1, r2, #1
 800224a:	6031      	str	r1, [r6, #0]
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	f805 2b01 	strb.w	r2, [r5], #1
 8002252:	6872      	ldr	r2, [r6, #4]
 8002254:	3a01      	subs	r2, #1
 8002256:	2a00      	cmp	r2, #0
 8002258:	6072      	str	r2, [r6, #4]
 800225a:	dc07      	bgt.n	800226c <_scanf_i+0xb8>
 800225c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8002260:	4631      	mov	r1, r6
 8002262:	4650      	mov	r0, sl
 8002264:	4790      	blx	r2
 8002266:	2800      	cmp	r0, #0
 8002268:	f040 8085 	bne.w	8002376 <_scanf_i+0x1c2>
 800226c:	f10b 0b01 	add.w	fp, fp, #1
 8002270:	f1bb 0f03 	cmp.w	fp, #3
 8002274:	d1cb      	bne.n	800220e <_scanf_i+0x5a>
 8002276:	6863      	ldr	r3, [r4, #4]
 8002278:	b90b      	cbnz	r3, 800227e <_scanf_i+0xca>
 800227a:	230a      	movs	r3, #10
 800227c:	6063      	str	r3, [r4, #4]
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	4945      	ldr	r1, [pc, #276]	@ (8002398 <_scanf_i+0x1e4>)
 8002282:	6960      	ldr	r0, [r4, #20]
 8002284:	1ac9      	subs	r1, r1, r3
 8002286:	f000 fa19 	bl	80026bc <__sccl>
 800228a:	f04f 0b00 	mov.w	fp, #0
 800228e:	68a3      	ldr	r3, [r4, #8]
 8002290:	6822      	ldr	r2, [r4, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03d      	beq.n	8002312 <_scanf_i+0x15e>
 8002296:	6831      	ldr	r1, [r6, #0]
 8002298:	6960      	ldr	r0, [r4, #20]
 800229a:	f891 c000 	ldrb.w	ip, [r1]
 800229e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d035      	beq.n	8002312 <_scanf_i+0x15e>
 80022a6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80022aa:	d124      	bne.n	80022f6 <_scanf_i+0x142>
 80022ac:	0510      	lsls	r0, r2, #20
 80022ae:	d522      	bpl.n	80022f6 <_scanf_i+0x142>
 80022b0:	f10b 0b01 	add.w	fp, fp, #1
 80022b4:	f1b9 0f00 	cmp.w	r9, #0
 80022b8:	d003      	beq.n	80022c2 <_scanf_i+0x10e>
 80022ba:	3301      	adds	r3, #1
 80022bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80022c0:	60a3      	str	r3, [r4, #8]
 80022c2:	6873      	ldr	r3, [r6, #4]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	6073      	str	r3, [r6, #4]
 80022ca:	dd1b      	ble.n	8002304 <_scanf_i+0x150>
 80022cc:	6833      	ldr	r3, [r6, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	6033      	str	r3, [r6, #0]
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	e7d9      	b.n	800228e <_scanf_i+0xda>
 80022da:	f1bb 0f02 	cmp.w	fp, #2
 80022de:	d1ae      	bne.n	800223e <_scanf_i+0x8a>
 80022e0:	6822      	ldr	r2, [r4, #0]
 80022e2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80022e6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80022ea:	d1bf      	bne.n	800226c <_scanf_i+0xb8>
 80022ec:	2110      	movs	r1, #16
 80022ee:	6061      	str	r1, [r4, #4]
 80022f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022f4:	e7a2      	b.n	800223c <_scanf_i+0x88>
 80022f6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80022fa:	6022      	str	r2, [r4, #0]
 80022fc:	780b      	ldrb	r3, [r1, #0]
 80022fe:	f805 3b01 	strb.w	r3, [r5], #1
 8002302:	e7de      	b.n	80022c2 <_scanf_i+0x10e>
 8002304:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002308:	4631      	mov	r1, r6
 800230a:	4650      	mov	r0, sl
 800230c:	4798      	blx	r3
 800230e:	2800      	cmp	r0, #0
 8002310:	d0df      	beq.n	80022d2 <_scanf_i+0x11e>
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	05d9      	lsls	r1, r3, #23
 8002316:	d50d      	bpl.n	8002334 <_scanf_i+0x180>
 8002318:	42bd      	cmp	r5, r7
 800231a:	d909      	bls.n	8002330 <_scanf_i+0x17c>
 800231c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002320:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002324:	4632      	mov	r2, r6
 8002326:	4650      	mov	r0, sl
 8002328:	4798      	blx	r3
 800232a:	f105 39ff 	add.w	r9, r5, #4294967295
 800232e:	464d      	mov	r5, r9
 8002330:	42bd      	cmp	r5, r7
 8002332:	d028      	beq.n	8002386 <_scanf_i+0x1d2>
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	f012 0210 	ands.w	r2, r2, #16
 800233a:	d113      	bne.n	8002364 <_scanf_i+0x1b0>
 800233c:	702a      	strb	r2, [r5, #0]
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	9e01      	ldr	r6, [sp, #4]
 8002342:	4639      	mov	r1, r7
 8002344:	4650      	mov	r0, sl
 8002346:	47b0      	blx	r6
 8002348:	f8d8 3000 	ldr.w	r3, [r8]
 800234c:	6821      	ldr	r1, [r4, #0]
 800234e:	1d1a      	adds	r2, r3, #4
 8002350:	f8c8 2000 	str.w	r2, [r8]
 8002354:	f011 0f20 	tst.w	r1, #32
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	d00f      	beq.n	800237c <_scanf_i+0x1c8>
 800235c:	6018      	str	r0, [r3, #0]
 800235e:	68e3      	ldr	r3, [r4, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60e3      	str	r3, [r4, #12]
 8002364:	6923      	ldr	r3, [r4, #16]
 8002366:	1bed      	subs	r5, r5, r7
 8002368:	445d      	add	r5, fp
 800236a:	442b      	add	r3, r5
 800236c:	6123      	str	r3, [r4, #16]
 800236e:	2000      	movs	r0, #0
 8002370:	b007      	add	sp, #28
 8002372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002376:	f04f 0b00 	mov.w	fp, #0
 800237a:	e7ca      	b.n	8002312 <_scanf_i+0x15e>
 800237c:	07ca      	lsls	r2, r1, #31
 800237e:	bf4c      	ite	mi
 8002380:	8018      	strhmi	r0, [r3, #0]
 8002382:	6018      	strpl	r0, [r3, #0]
 8002384:	e7eb      	b.n	800235e <_scanf_i+0x1aa>
 8002386:	2001      	movs	r0, #1
 8002388:	e7f2      	b.n	8002370 <_scanf_i+0x1bc>
 800238a:	bf00      	nop
 800238c:	08002b90 	.word	0x08002b90
 8002390:	08002a71 	.word	0x08002a71
 8002394:	08002b51 	.word	0x08002b51
 8002398:	08002bf0 	.word	0x08002bf0

0800239c <__sflush_r>:
 800239c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a4:	0716      	lsls	r6, r2, #28
 80023a6:	4605      	mov	r5, r0
 80023a8:	460c      	mov	r4, r1
 80023aa:	d454      	bmi.n	8002456 <__sflush_r+0xba>
 80023ac:	684b      	ldr	r3, [r1, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	dc02      	bgt.n	80023b8 <__sflush_r+0x1c>
 80023b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	dd48      	ble.n	800244a <__sflush_r+0xae>
 80023b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023ba:	2e00      	cmp	r6, #0
 80023bc:	d045      	beq.n	800244a <__sflush_r+0xae>
 80023be:	2300      	movs	r3, #0
 80023c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023c4:	682f      	ldr	r7, [r5, #0]
 80023c6:	6a21      	ldr	r1, [r4, #32]
 80023c8:	602b      	str	r3, [r5, #0]
 80023ca:	d030      	beq.n	800242e <__sflush_r+0x92>
 80023cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	0759      	lsls	r1, r3, #29
 80023d2:	d505      	bpl.n	80023e0 <__sflush_r+0x44>
 80023d4:	6863      	ldr	r3, [r4, #4]
 80023d6:	1ad2      	subs	r2, r2, r3
 80023d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023da:	b10b      	cbz	r3, 80023e0 <__sflush_r+0x44>
 80023dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	2300      	movs	r3, #0
 80023e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023e4:	6a21      	ldr	r1, [r4, #32]
 80023e6:	4628      	mov	r0, r5
 80023e8:	47b0      	blx	r6
 80023ea:	1c43      	adds	r3, r0, #1
 80023ec:	89a3      	ldrh	r3, [r4, #12]
 80023ee:	d106      	bne.n	80023fe <__sflush_r+0x62>
 80023f0:	6829      	ldr	r1, [r5, #0]
 80023f2:	291d      	cmp	r1, #29
 80023f4:	d82b      	bhi.n	800244e <__sflush_r+0xb2>
 80023f6:	4a2a      	ldr	r2, [pc, #168]	@ (80024a0 <__sflush_r+0x104>)
 80023f8:	410a      	asrs	r2, r1
 80023fa:	07d6      	lsls	r6, r2, #31
 80023fc:	d427      	bmi.n	800244e <__sflush_r+0xb2>
 80023fe:	2200      	movs	r2, #0
 8002400:	6062      	str	r2, [r4, #4]
 8002402:	04d9      	lsls	r1, r3, #19
 8002404:	6922      	ldr	r2, [r4, #16]
 8002406:	6022      	str	r2, [r4, #0]
 8002408:	d504      	bpl.n	8002414 <__sflush_r+0x78>
 800240a:	1c42      	adds	r2, r0, #1
 800240c:	d101      	bne.n	8002412 <__sflush_r+0x76>
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	b903      	cbnz	r3, 8002414 <__sflush_r+0x78>
 8002412:	6560      	str	r0, [r4, #84]	@ 0x54
 8002414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002416:	602f      	str	r7, [r5, #0]
 8002418:	b1b9      	cbz	r1, 800244a <__sflush_r+0xae>
 800241a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800241e:	4299      	cmp	r1, r3
 8002420:	d002      	beq.n	8002428 <__sflush_r+0x8c>
 8002422:	4628      	mov	r0, r5
 8002424:	f7ff fbc4 	bl	8001bb0 <_free_r>
 8002428:	2300      	movs	r3, #0
 800242a:	6363      	str	r3, [r4, #52]	@ 0x34
 800242c:	e00d      	b.n	800244a <__sflush_r+0xae>
 800242e:	2301      	movs	r3, #1
 8002430:	4628      	mov	r0, r5
 8002432:	47b0      	blx	r6
 8002434:	4602      	mov	r2, r0
 8002436:	1c50      	adds	r0, r2, #1
 8002438:	d1c9      	bne.n	80023ce <__sflush_r+0x32>
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0c6      	beq.n	80023ce <__sflush_r+0x32>
 8002440:	2b1d      	cmp	r3, #29
 8002442:	d001      	beq.n	8002448 <__sflush_r+0xac>
 8002444:	2b16      	cmp	r3, #22
 8002446:	d11e      	bne.n	8002486 <__sflush_r+0xea>
 8002448:	602f      	str	r7, [r5, #0]
 800244a:	2000      	movs	r0, #0
 800244c:	e022      	b.n	8002494 <__sflush_r+0xf8>
 800244e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002452:	b21b      	sxth	r3, r3
 8002454:	e01b      	b.n	800248e <__sflush_r+0xf2>
 8002456:	690f      	ldr	r7, [r1, #16]
 8002458:	2f00      	cmp	r7, #0
 800245a:	d0f6      	beq.n	800244a <__sflush_r+0xae>
 800245c:	0793      	lsls	r3, r2, #30
 800245e:	680e      	ldr	r6, [r1, #0]
 8002460:	bf08      	it	eq
 8002462:	694b      	ldreq	r3, [r1, #20]
 8002464:	600f      	str	r7, [r1, #0]
 8002466:	bf18      	it	ne
 8002468:	2300      	movne	r3, #0
 800246a:	eba6 0807 	sub.w	r8, r6, r7
 800246e:	608b      	str	r3, [r1, #8]
 8002470:	f1b8 0f00 	cmp.w	r8, #0
 8002474:	dde9      	ble.n	800244a <__sflush_r+0xae>
 8002476:	6a21      	ldr	r1, [r4, #32]
 8002478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800247a:	4643      	mov	r3, r8
 800247c:	463a      	mov	r2, r7
 800247e:	4628      	mov	r0, r5
 8002480:	47b0      	blx	r6
 8002482:	2800      	cmp	r0, #0
 8002484:	dc08      	bgt.n	8002498 <__sflush_r+0xfc>
 8002486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800248a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800248e:	81a3      	strh	r3, [r4, #12]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002498:	4407      	add	r7, r0
 800249a:	eba8 0800 	sub.w	r8, r8, r0
 800249e:	e7e7      	b.n	8002470 <__sflush_r+0xd4>
 80024a0:	dfbffffe 	.word	0xdfbffffe

080024a4 <_fflush_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	690b      	ldr	r3, [r1, #16]
 80024a8:	4605      	mov	r5, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	b913      	cbnz	r3, 80024b4 <_fflush_r+0x10>
 80024ae:	2500      	movs	r5, #0
 80024b0:	4628      	mov	r0, r5
 80024b2:	bd38      	pop	{r3, r4, r5, pc}
 80024b4:	b118      	cbz	r0, 80024be <_fflush_r+0x1a>
 80024b6:	6a03      	ldr	r3, [r0, #32]
 80024b8:	b90b      	cbnz	r3, 80024be <_fflush_r+0x1a>
 80024ba:	f7ff f97f 	bl	80017bc <__sinit>
 80024be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f3      	beq.n	80024ae <_fflush_r+0xa>
 80024c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024c8:	07d0      	lsls	r0, r2, #31
 80024ca:	d404      	bmi.n	80024d6 <_fflush_r+0x32>
 80024cc:	0599      	lsls	r1, r3, #22
 80024ce:	d402      	bmi.n	80024d6 <_fflush_r+0x32>
 80024d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024d2:	f7ff fb6a 	bl	8001baa <__retarget_lock_acquire_recursive>
 80024d6:	4628      	mov	r0, r5
 80024d8:	4621      	mov	r1, r4
 80024da:	f7ff ff5f 	bl	800239c <__sflush_r>
 80024de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024e0:	07da      	lsls	r2, r3, #31
 80024e2:	4605      	mov	r5, r0
 80024e4:	d4e4      	bmi.n	80024b0 <_fflush_r+0xc>
 80024e6:	89a3      	ldrh	r3, [r4, #12]
 80024e8:	059b      	lsls	r3, r3, #22
 80024ea:	d4e1      	bmi.n	80024b0 <_fflush_r+0xc>
 80024ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024ee:	f7ff fb5d 	bl	8001bac <__retarget_lock_release_recursive>
 80024f2:	e7dd      	b.n	80024b0 <_fflush_r+0xc>

080024f4 <__swhatbuf_r>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	460c      	mov	r4, r1
 80024f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024fc:	2900      	cmp	r1, #0
 80024fe:	b096      	sub	sp, #88	@ 0x58
 8002500:	4615      	mov	r5, r2
 8002502:	461e      	mov	r6, r3
 8002504:	da0d      	bge.n	8002522 <__swhatbuf_r+0x2e>
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	bf14      	ite	ne
 8002512:	2340      	movne	r3, #64	@ 0x40
 8002514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002518:	2000      	movs	r0, #0
 800251a:	6031      	str	r1, [r6, #0]
 800251c:	602b      	str	r3, [r5, #0]
 800251e:	b016      	add	sp, #88	@ 0x58
 8002520:	bd70      	pop	{r4, r5, r6, pc}
 8002522:	466a      	mov	r2, sp
 8002524:	f000 f9bc 	bl	80028a0 <_fstat_r>
 8002528:	2800      	cmp	r0, #0
 800252a:	dbec      	blt.n	8002506 <__swhatbuf_r+0x12>
 800252c:	9901      	ldr	r1, [sp, #4]
 800252e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002536:	4259      	negs	r1, r3
 8002538:	4159      	adcs	r1, r3
 800253a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800253e:	e7eb      	b.n	8002518 <__swhatbuf_r+0x24>

08002540 <__smakebuf_r>:
 8002540:	898b      	ldrh	r3, [r1, #12]
 8002542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002544:	079d      	lsls	r5, r3, #30
 8002546:	4606      	mov	r6, r0
 8002548:	460c      	mov	r4, r1
 800254a:	d507      	bpl.n	800255c <__smakebuf_r+0x1c>
 800254c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	6123      	str	r3, [r4, #16]
 8002554:	2301      	movs	r3, #1
 8002556:	6163      	str	r3, [r4, #20]
 8002558:	b003      	add	sp, #12
 800255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255c:	ab01      	add	r3, sp, #4
 800255e:	466a      	mov	r2, sp
 8002560:	f7ff ffc8 	bl	80024f4 <__swhatbuf_r>
 8002564:	9f00      	ldr	r7, [sp, #0]
 8002566:	4605      	mov	r5, r0
 8002568:	4639      	mov	r1, r7
 800256a:	4630      	mov	r0, r6
 800256c:	f7ff fb8c 	bl	8001c88 <_malloc_r>
 8002570:	b948      	cbnz	r0, 8002586 <__smakebuf_r+0x46>
 8002572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002576:	059a      	lsls	r2, r3, #22
 8002578:	d4ee      	bmi.n	8002558 <__smakebuf_r+0x18>
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	e7e2      	b.n	800254c <__smakebuf_r+0xc>
 8002586:	89a3      	ldrh	r3, [r4, #12]
 8002588:	6020      	str	r0, [r4, #0]
 800258a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800258e:	81a3      	strh	r3, [r4, #12]
 8002590:	9b01      	ldr	r3, [sp, #4]
 8002592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002596:	b15b      	cbz	r3, 80025b0 <__smakebuf_r+0x70>
 8002598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800259c:	4630      	mov	r0, r6
 800259e:	f000 f991 	bl	80028c4 <_isatty_r>
 80025a2:	b128      	cbz	r0, 80025b0 <__smakebuf_r+0x70>
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	81a3      	strh	r3, [r4, #12]
 80025b0:	89a3      	ldrh	r3, [r4, #12]
 80025b2:	431d      	orrs	r5, r3
 80025b4:	81a5      	strh	r5, [r4, #12]
 80025b6:	e7cf      	b.n	8002558 <__smakebuf_r+0x18>

080025b8 <lflush>:
 80025b8:	898b      	ldrh	r3, [r1, #12]
 80025ba:	f003 0309 	and.w	r3, r3, #9
 80025be:	2b09      	cmp	r3, #9
 80025c0:	d103      	bne.n	80025ca <lflush+0x12>
 80025c2:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <lflush+0x18>)
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	f7ff bf6d 	b.w	80024a4 <_fflush_r>
 80025ca:	2000      	movs	r0, #0
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000018 	.word	0x20000018

080025d4 <__srefill_r>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	460c      	mov	r4, r1
 80025d8:	4605      	mov	r5, r0
 80025da:	b118      	cbz	r0, 80025e4 <__srefill_r+0x10>
 80025dc:	6a03      	ldr	r3, [r0, #32]
 80025de:	b90b      	cbnz	r3, 80025e4 <__srefill_r+0x10>
 80025e0:	f7ff f8ec 	bl	80017bc <__sinit>
 80025e4:	2300      	movs	r3, #0
 80025e6:	6063      	str	r3, [r4, #4]
 80025e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ec:	069e      	lsls	r6, r3, #26
 80025ee:	d408      	bmi.n	8002602 <__srefill_r+0x2e>
 80025f0:	0758      	lsls	r0, r3, #29
 80025f2:	d445      	bmi.n	8002680 <__srefill_r+0xac>
 80025f4:	06d9      	lsls	r1, r3, #27
 80025f6:	d407      	bmi.n	8002608 <__srefill_r+0x34>
 80025f8:	2209      	movs	r2, #9
 80025fa:	602a      	str	r2, [r5, #0]
 80025fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002600:	81a3      	strh	r3, [r4, #12]
 8002602:	f04f 30ff 	mov.w	r0, #4294967295
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	071a      	lsls	r2, r3, #28
 800260a:	d50b      	bpl.n	8002624 <__srefill_r+0x50>
 800260c:	4621      	mov	r1, r4
 800260e:	4628      	mov	r0, r5
 8002610:	f7ff ff48 	bl	80024a4 <_fflush_r>
 8002614:	2800      	cmp	r0, #0
 8002616:	d1f4      	bne.n	8002602 <__srefill_r+0x2e>
 8002618:	89a3      	ldrh	r3, [r4, #12]
 800261a:	60a0      	str	r0, [r4, #8]
 800261c:	f023 0308 	bic.w	r3, r3, #8
 8002620:	81a3      	strh	r3, [r4, #12]
 8002622:	61a0      	str	r0, [r4, #24]
 8002624:	89a3      	ldrh	r3, [r4, #12]
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	81a3      	strh	r3, [r4, #12]
 800262c:	6923      	ldr	r3, [r4, #16]
 800262e:	b91b      	cbnz	r3, 8002638 <__srefill_r+0x64>
 8002630:	4621      	mov	r1, r4
 8002632:	4628      	mov	r0, r5
 8002634:	f7ff ff84 	bl	8002540 <__smakebuf_r>
 8002638:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800263c:	07b3      	lsls	r3, r6, #30
 800263e:	d00f      	beq.n	8002660 <__srefill_r+0x8c>
 8002640:	2301      	movs	r3, #1
 8002642:	4a1b      	ldr	r2, [pc, #108]	@ (80026b0 <__srefill_r+0xdc>)
 8002644:	491b      	ldr	r1, [pc, #108]	@ (80026b4 <__srefill_r+0xe0>)
 8002646:	481c      	ldr	r0, [pc, #112]	@ (80026b8 <__srefill_r+0xe4>)
 8002648:	81a3      	strh	r3, [r4, #12]
 800264a:	f7ff f8cf 	bl	80017ec <_fwalk_sglue>
 800264e:	81a6      	strh	r6, [r4, #12]
 8002650:	f006 0609 	and.w	r6, r6, #9
 8002654:	2e09      	cmp	r6, #9
 8002656:	d103      	bne.n	8002660 <__srefill_r+0x8c>
 8002658:	4621      	mov	r1, r4
 800265a:	4628      	mov	r0, r5
 800265c:	f7ff fe9e 	bl	800239c <__sflush_r>
 8002660:	6922      	ldr	r2, [r4, #16]
 8002662:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8002664:	6963      	ldr	r3, [r4, #20]
 8002666:	6a21      	ldr	r1, [r4, #32]
 8002668:	6022      	str	r2, [r4, #0]
 800266a:	4628      	mov	r0, r5
 800266c:	47b0      	blx	r6
 800266e:	2800      	cmp	r0, #0
 8002670:	6060      	str	r0, [r4, #4]
 8002672:	dc17      	bgt.n	80026a4 <__srefill_r+0xd0>
 8002674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002678:	d116      	bne.n	80026a8 <__srefill_r+0xd4>
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	e7bf      	b.n	8002600 <__srefill_r+0x2c>
 8002680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002682:	2900      	cmp	r1, #0
 8002684:	d0d2      	beq.n	800262c <__srefill_r+0x58>
 8002686:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800268a:	4299      	cmp	r1, r3
 800268c:	d002      	beq.n	8002694 <__srefill_r+0xc0>
 800268e:	4628      	mov	r0, r5
 8002690:	f7ff fa8e 	bl	8001bb0 <_free_r>
 8002694:	2300      	movs	r3, #0
 8002696:	6363      	str	r3, [r4, #52]	@ 0x34
 8002698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800269a:	6063      	str	r3, [r4, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0c5      	beq.n	800262c <__srefill_r+0x58>
 80026a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80026a2:	6023      	str	r3, [r4, #0]
 80026a4:	2000      	movs	r0, #0
 80026a6:	e7ae      	b.n	8002606 <__srefill_r+0x32>
 80026a8:	2200      	movs	r2, #0
 80026aa:	6062      	str	r2, [r4, #4]
 80026ac:	e7a6      	b.n	80025fc <__srefill_r+0x28>
 80026ae:	bf00      	nop
 80026b0:	2000000c 	.word	0x2000000c
 80026b4:	080025b9 	.word	0x080025b9
 80026b8:	2000001c 	.word	0x2000001c

080026bc <__sccl>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	780b      	ldrb	r3, [r1, #0]
 80026c0:	4604      	mov	r4, r0
 80026c2:	2b5e      	cmp	r3, #94	@ 0x5e
 80026c4:	bf0b      	itete	eq
 80026c6:	784b      	ldrbeq	r3, [r1, #1]
 80026c8:	1c4a      	addne	r2, r1, #1
 80026ca:	1c8a      	addeq	r2, r1, #2
 80026cc:	2100      	movne	r1, #0
 80026ce:	bf08      	it	eq
 80026d0:	2101      	moveq	r1, #1
 80026d2:	3801      	subs	r0, #1
 80026d4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80026d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80026dc:	42a8      	cmp	r0, r5
 80026de:	d1fb      	bne.n	80026d8 <__sccl+0x1c>
 80026e0:	b90b      	cbnz	r3, 80026e6 <__sccl+0x2a>
 80026e2:	1e50      	subs	r0, r2, #1
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
 80026e6:	f081 0101 	eor.w	r1, r1, #1
 80026ea:	54e1      	strb	r1, [r4, r3]
 80026ec:	4610      	mov	r0, r2
 80026ee:	4602      	mov	r2, r0
 80026f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80026f4:	2d2d      	cmp	r5, #45	@ 0x2d
 80026f6:	d005      	beq.n	8002704 <__sccl+0x48>
 80026f8:	2d5d      	cmp	r5, #93	@ 0x5d
 80026fa:	d016      	beq.n	800272a <__sccl+0x6e>
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	d0f1      	beq.n	80026e4 <__sccl+0x28>
 8002700:	462b      	mov	r3, r5
 8002702:	e7f2      	b.n	80026ea <__sccl+0x2e>
 8002704:	7846      	ldrb	r6, [r0, #1]
 8002706:	2e5d      	cmp	r6, #93	@ 0x5d
 8002708:	d0fa      	beq.n	8002700 <__sccl+0x44>
 800270a:	42b3      	cmp	r3, r6
 800270c:	dcf8      	bgt.n	8002700 <__sccl+0x44>
 800270e:	3002      	adds	r0, #2
 8002710:	461a      	mov	r2, r3
 8002712:	3201      	adds	r2, #1
 8002714:	4296      	cmp	r6, r2
 8002716:	54a1      	strb	r1, [r4, r2]
 8002718:	dcfb      	bgt.n	8002712 <__sccl+0x56>
 800271a:	1af2      	subs	r2, r6, r3
 800271c:	3a01      	subs	r2, #1
 800271e:	1c5d      	adds	r5, r3, #1
 8002720:	42b3      	cmp	r3, r6
 8002722:	bfa8      	it	ge
 8002724:	2200      	movge	r2, #0
 8002726:	18ab      	adds	r3, r5, r2
 8002728:	e7e1      	b.n	80026ee <__sccl+0x32>
 800272a:	4610      	mov	r0, r2
 800272c:	e7da      	b.n	80026e4 <__sccl+0x28>

0800272e <__submore>:
 800272e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002732:	460c      	mov	r4, r1
 8002734:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800273a:	4299      	cmp	r1, r3
 800273c:	d11d      	bne.n	800277a <__submore+0x4c>
 800273e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002742:	f7ff faa1 	bl	8001c88 <_malloc_r>
 8002746:	b918      	cbnz	r0, 8002750 <__submore+0x22>
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002754:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002756:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800275a:	6360      	str	r0, [r4, #52]	@ 0x34
 800275c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8002760:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002764:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8002768:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800276c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8002770:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8002774:	6020      	str	r0, [r4, #0]
 8002776:	2000      	movs	r0, #0
 8002778:	e7e8      	b.n	800274c <__submore+0x1e>
 800277a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800277c:	0077      	lsls	r7, r6, #1
 800277e:	463a      	mov	r2, r7
 8002780:	f000 f8ce 	bl	8002920 <_realloc_r>
 8002784:	4605      	mov	r5, r0
 8002786:	2800      	cmp	r0, #0
 8002788:	d0de      	beq.n	8002748 <__submore+0x1a>
 800278a:	eb00 0806 	add.w	r8, r0, r6
 800278e:	4601      	mov	r1, r0
 8002790:	4632      	mov	r2, r6
 8002792:	4640      	mov	r0, r8
 8002794:	f000 f8b6 	bl	8002904 <memcpy>
 8002798:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800279c:	f8c4 8000 	str.w	r8, [r4]
 80027a0:	e7e9      	b.n	8002776 <__submore+0x48>

080027a2 <_ungetc_r>:
 80027a2:	b570      	push	{r4, r5, r6, lr}
 80027a4:	460d      	mov	r5, r1
 80027a6:	1c69      	adds	r1, r5, #1
 80027a8:	4606      	mov	r6, r0
 80027aa:	4614      	mov	r4, r2
 80027ac:	d01e      	beq.n	80027ec <_ungetc_r+0x4a>
 80027ae:	b118      	cbz	r0, 80027b8 <_ungetc_r+0x16>
 80027b0:	6a03      	ldr	r3, [r0, #32]
 80027b2:	b90b      	cbnz	r3, 80027b8 <_ungetc_r+0x16>
 80027b4:	f7ff f802 	bl	80017bc <__sinit>
 80027b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027ba:	07da      	lsls	r2, r3, #31
 80027bc:	d405      	bmi.n	80027ca <_ungetc_r+0x28>
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	059b      	lsls	r3, r3, #22
 80027c2:	d402      	bmi.n	80027ca <_ungetc_r+0x28>
 80027c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027c6:	f7ff f9f0 	bl	8001baa <__retarget_lock_acquire_recursive>
 80027ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ce:	f023 0220 	bic.w	r2, r3, #32
 80027d2:	0758      	lsls	r0, r3, #29
 80027d4:	81a2      	strh	r2, [r4, #12]
 80027d6:	d422      	bmi.n	800281e <_ungetc_r+0x7c>
 80027d8:	06d9      	lsls	r1, r3, #27
 80027da:	d40a      	bmi.n	80027f2 <_ungetc_r+0x50>
 80027dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80027de:	07d2      	lsls	r2, r2, #31
 80027e0:	d404      	bmi.n	80027ec <_ungetc_r+0x4a>
 80027e2:	0599      	lsls	r1, r3, #22
 80027e4:	d402      	bmi.n	80027ec <_ungetc_r+0x4a>
 80027e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027e8:	f7ff f9e0 	bl	8001bac <__retarget_lock_release_recursive>
 80027ec:	f04f 35ff 	mov.w	r5, #4294967295
 80027f0:	e046      	b.n	8002880 <_ungetc_r+0xde>
 80027f2:	071b      	lsls	r3, r3, #28
 80027f4:	d50f      	bpl.n	8002816 <_ungetc_r+0x74>
 80027f6:	4621      	mov	r1, r4
 80027f8:	4630      	mov	r0, r6
 80027fa:	f7ff fe53 	bl	80024a4 <_fflush_r>
 80027fe:	b120      	cbz	r0, 800280a <_ungetc_r+0x68>
 8002800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002802:	07d8      	lsls	r0, r3, #31
 8002804:	d4f2      	bmi.n	80027ec <_ungetc_r+0x4a>
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	e7eb      	b.n	80027e2 <_ungetc_r+0x40>
 800280a:	89a3      	ldrh	r3, [r4, #12]
 800280c:	60a0      	str	r0, [r4, #8]
 800280e:	f023 0308 	bic.w	r3, r3, #8
 8002812:	81a3      	strh	r3, [r4, #12]
 8002814:	61a0      	str	r0, [r4, #24]
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	81a3      	strh	r3, [r4, #12]
 800281e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002820:	6862      	ldr	r2, [r4, #4]
 8002822:	b2ed      	uxtb	r5, r5
 8002824:	b1d3      	cbz	r3, 800285c <_ungetc_r+0xba>
 8002826:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002828:	4293      	cmp	r3, r2
 800282a:	dc05      	bgt.n	8002838 <_ungetc_r+0x96>
 800282c:	4621      	mov	r1, r4
 800282e:	4630      	mov	r0, r6
 8002830:	f7ff ff7d 	bl	800272e <__submore>
 8002834:	2800      	cmp	r0, #0
 8002836:	d1e3      	bne.n	8002800 <_ungetc_r+0x5e>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	6022      	str	r2, [r4, #0]
 800283e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002842:	6863      	ldr	r3, [r4, #4]
 8002844:	3301      	adds	r3, #1
 8002846:	6063      	str	r3, [r4, #4]
 8002848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800284a:	07da      	lsls	r2, r3, #31
 800284c:	d418      	bmi.n	8002880 <_ungetc_r+0xde>
 800284e:	89a3      	ldrh	r3, [r4, #12]
 8002850:	059b      	lsls	r3, r3, #22
 8002852:	d415      	bmi.n	8002880 <_ungetc_r+0xde>
 8002854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002856:	f7ff f9a9 	bl	8001bac <__retarget_lock_release_recursive>
 800285a:	e011      	b.n	8002880 <_ungetc_r+0xde>
 800285c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800285e:	6920      	ldr	r0, [r4, #16]
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	f001 0101 	and.w	r1, r1, #1
 8002866:	b168      	cbz	r0, 8002884 <_ungetc_r+0xe2>
 8002868:	4298      	cmp	r0, r3
 800286a:	d20b      	bcs.n	8002884 <_ungetc_r+0xe2>
 800286c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8002870:	42a8      	cmp	r0, r5
 8002872:	d107      	bne.n	8002884 <_ungetc_r+0xe2>
 8002874:	3b01      	subs	r3, #1
 8002876:	3201      	adds	r2, #1
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	6062      	str	r2, [r4, #4]
 800287c:	2900      	cmp	r1, #0
 800287e:	d0e6      	beq.n	800284e <_ungetc_r+0xac>
 8002880:	4628      	mov	r0, r5
 8002882:	bd70      	pop	{r4, r5, r6, pc}
 8002884:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8002888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800288c:	6363      	str	r3, [r4, #52]	@ 0x34
 800288e:	2303      	movs	r3, #3
 8002890:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002892:	4623      	mov	r3, r4
 8002894:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002898:	6023      	str	r3, [r4, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	6063      	str	r3, [r4, #4]
 800289e:	e7ed      	b.n	800287c <_ungetc_r+0xda>

080028a0 <_fstat_r>:
 80028a0:	b538      	push	{r3, r4, r5, lr}
 80028a2:	4d07      	ldr	r5, [pc, #28]	@ (80028c0 <_fstat_r+0x20>)
 80028a4:	2300      	movs	r3, #0
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	602b      	str	r3, [r5, #0]
 80028ae:	f7fd fed9 	bl	8000664 <_fstat>
 80028b2:	1c43      	adds	r3, r0, #1
 80028b4:	d102      	bne.n	80028bc <_fstat_r+0x1c>
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	b103      	cbz	r3, 80028bc <_fstat_r+0x1c>
 80028ba:	6023      	str	r3, [r4, #0]
 80028bc:	bd38      	pop	{r3, r4, r5, pc}
 80028be:	bf00      	nop
 80028c0:	200001c8 	.word	0x200001c8

080028c4 <_isatty_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4d06      	ldr	r5, [pc, #24]	@ (80028e0 <_isatty_r+0x1c>)
 80028c8:	2300      	movs	r3, #0
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	602b      	str	r3, [r5, #0]
 80028d0:	f7fd fed8 	bl	8000684 <_isatty>
 80028d4:	1c43      	adds	r3, r0, #1
 80028d6:	d102      	bne.n	80028de <_isatty_r+0x1a>
 80028d8:	682b      	ldr	r3, [r5, #0]
 80028da:	b103      	cbz	r3, 80028de <_isatty_r+0x1a>
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	bd38      	pop	{r3, r4, r5, pc}
 80028e0:	200001c8 	.word	0x200001c8

080028e4 <_sbrk_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4d06      	ldr	r5, [pc, #24]	@ (8002900 <_sbrk_r+0x1c>)
 80028e8:	2300      	movs	r3, #0
 80028ea:	4604      	mov	r4, r0
 80028ec:	4608      	mov	r0, r1
 80028ee:	602b      	str	r3, [r5, #0]
 80028f0:	f7fd fee0 	bl	80006b4 <_sbrk>
 80028f4:	1c43      	adds	r3, r0, #1
 80028f6:	d102      	bne.n	80028fe <_sbrk_r+0x1a>
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	b103      	cbz	r3, 80028fe <_sbrk_r+0x1a>
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
 8002900:	200001c8 	.word	0x200001c8

08002904 <memcpy>:
 8002904:	440a      	add	r2, r1
 8002906:	4291      	cmp	r1, r2
 8002908:	f100 33ff 	add.w	r3, r0, #4294967295
 800290c:	d100      	bne.n	8002910 <memcpy+0xc>
 800290e:	4770      	bx	lr
 8002910:	b510      	push	{r4, lr}
 8002912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800291a:	4291      	cmp	r1, r2
 800291c:	d1f9      	bne.n	8002912 <memcpy+0xe>
 800291e:	bd10      	pop	{r4, pc}

08002920 <_realloc_r>:
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	4680      	mov	r8, r0
 8002926:	4615      	mov	r5, r2
 8002928:	460c      	mov	r4, r1
 800292a:	b921      	cbnz	r1, 8002936 <_realloc_r+0x16>
 800292c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002930:	4611      	mov	r1, r2
 8002932:	f7ff b9a9 	b.w	8001c88 <_malloc_r>
 8002936:	b92a      	cbnz	r2, 8002944 <_realloc_r+0x24>
 8002938:	f7ff f93a 	bl	8001bb0 <_free_r>
 800293c:	2400      	movs	r4, #0
 800293e:	4620      	mov	r0, r4
 8002940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002944:	f000 f906 	bl	8002b54 <_malloc_usable_size_r>
 8002948:	4285      	cmp	r5, r0
 800294a:	4606      	mov	r6, r0
 800294c:	d802      	bhi.n	8002954 <_realloc_r+0x34>
 800294e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002952:	d8f4      	bhi.n	800293e <_realloc_r+0x1e>
 8002954:	4629      	mov	r1, r5
 8002956:	4640      	mov	r0, r8
 8002958:	f7ff f996 	bl	8001c88 <_malloc_r>
 800295c:	4607      	mov	r7, r0
 800295e:	2800      	cmp	r0, #0
 8002960:	d0ec      	beq.n	800293c <_realloc_r+0x1c>
 8002962:	42b5      	cmp	r5, r6
 8002964:	462a      	mov	r2, r5
 8002966:	4621      	mov	r1, r4
 8002968:	bf28      	it	cs
 800296a:	4632      	movcs	r2, r6
 800296c:	f7ff ffca 	bl	8002904 <memcpy>
 8002970:	4621      	mov	r1, r4
 8002972:	4640      	mov	r0, r8
 8002974:	f7ff f91c 	bl	8001bb0 <_free_r>
 8002978:	463c      	mov	r4, r7
 800297a:	e7e0      	b.n	800293e <_realloc_r+0x1e>

0800297c <_strtol_l.constprop.0>:
 800297c:	2b24      	cmp	r3, #36	@ 0x24
 800297e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002982:	4686      	mov	lr, r0
 8002984:	4690      	mov	r8, r2
 8002986:	d801      	bhi.n	800298c <_strtol_l.constprop.0+0x10>
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <_strtol_l.constprop.0+0x1e>
 800298c:	f7ff f8e2 	bl	8001b54 <__errno>
 8002990:	2316      	movs	r3, #22
 8002992:	6003      	str	r3, [r0, #0]
 8002994:	2000      	movs	r0, #0
 8002996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800299a:	4834      	ldr	r0, [pc, #208]	@ (8002a6c <_strtol_l.constprop.0+0xf0>)
 800299c:	460d      	mov	r5, r1
 800299e:	462a      	mov	r2, r5
 80029a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80029a4:	5d06      	ldrb	r6, [r0, r4]
 80029a6:	f016 0608 	ands.w	r6, r6, #8
 80029aa:	d1f8      	bne.n	800299e <_strtol_l.constprop.0+0x22>
 80029ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80029ae:	d12d      	bne.n	8002a0c <_strtol_l.constprop.0+0x90>
 80029b0:	782c      	ldrb	r4, [r5, #0]
 80029b2:	2601      	movs	r6, #1
 80029b4:	1c95      	adds	r5, r2, #2
 80029b6:	f033 0210 	bics.w	r2, r3, #16
 80029ba:	d109      	bne.n	80029d0 <_strtol_l.constprop.0+0x54>
 80029bc:	2c30      	cmp	r4, #48	@ 0x30
 80029be:	d12a      	bne.n	8002a16 <_strtol_l.constprop.0+0x9a>
 80029c0:	782a      	ldrb	r2, [r5, #0]
 80029c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80029c6:	2a58      	cmp	r2, #88	@ 0x58
 80029c8:	d125      	bne.n	8002a16 <_strtol_l.constprop.0+0x9a>
 80029ca:	786c      	ldrb	r4, [r5, #1]
 80029cc:	2310      	movs	r3, #16
 80029ce:	3502      	adds	r5, #2
 80029d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80029d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80029d8:	2200      	movs	r2, #0
 80029da:	fbbc f9f3 	udiv	r9, ip, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80029e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80029e8:	2f09      	cmp	r7, #9
 80029ea:	d81b      	bhi.n	8002a24 <_strtol_l.constprop.0+0xa8>
 80029ec:	463c      	mov	r4, r7
 80029ee:	42a3      	cmp	r3, r4
 80029f0:	dd27      	ble.n	8002a42 <_strtol_l.constprop.0+0xc6>
 80029f2:	1c57      	adds	r7, r2, #1
 80029f4:	d007      	beq.n	8002a06 <_strtol_l.constprop.0+0x8a>
 80029f6:	4581      	cmp	r9, r0
 80029f8:	d320      	bcc.n	8002a3c <_strtol_l.constprop.0+0xc0>
 80029fa:	d101      	bne.n	8002a00 <_strtol_l.constprop.0+0x84>
 80029fc:	45a2      	cmp	sl, r4
 80029fe:	db1d      	blt.n	8002a3c <_strtol_l.constprop.0+0xc0>
 8002a00:	fb00 4003 	mla	r0, r0, r3, r4
 8002a04:	2201      	movs	r2, #1
 8002a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a0a:	e7eb      	b.n	80029e4 <_strtol_l.constprop.0+0x68>
 8002a0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8002a0e:	bf04      	itt	eq
 8002a10:	782c      	ldrbeq	r4, [r5, #0]
 8002a12:	1c95      	addeq	r5, r2, #2
 8002a14:	e7cf      	b.n	80029b6 <_strtol_l.constprop.0+0x3a>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1da      	bne.n	80029d0 <_strtol_l.constprop.0+0x54>
 8002a1a:	2c30      	cmp	r4, #48	@ 0x30
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2308      	moveq	r3, #8
 8002a20:	230a      	movne	r3, #10
 8002a22:	e7d5      	b.n	80029d0 <_strtol_l.constprop.0+0x54>
 8002a24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002a28:	2f19      	cmp	r7, #25
 8002a2a:	d801      	bhi.n	8002a30 <_strtol_l.constprop.0+0xb4>
 8002a2c:	3c37      	subs	r4, #55	@ 0x37
 8002a2e:	e7de      	b.n	80029ee <_strtol_l.constprop.0+0x72>
 8002a30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002a34:	2f19      	cmp	r7, #25
 8002a36:	d804      	bhi.n	8002a42 <_strtol_l.constprop.0+0xc6>
 8002a38:	3c57      	subs	r4, #87	@ 0x57
 8002a3a:	e7d8      	b.n	80029ee <_strtol_l.constprop.0+0x72>
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	e7e1      	b.n	8002a06 <_strtol_l.constprop.0+0x8a>
 8002a42:	1c53      	adds	r3, r2, #1
 8002a44:	d108      	bne.n	8002a58 <_strtol_l.constprop.0+0xdc>
 8002a46:	2322      	movs	r3, #34	@ 0x22
 8002a48:	f8ce 3000 	str.w	r3, [lr]
 8002a4c:	4660      	mov	r0, ip
 8002a4e:	f1b8 0f00 	cmp.w	r8, #0
 8002a52:	d0a0      	beq.n	8002996 <_strtol_l.constprop.0+0x1a>
 8002a54:	1e69      	subs	r1, r5, #1
 8002a56:	e006      	b.n	8002a66 <_strtol_l.constprop.0+0xea>
 8002a58:	b106      	cbz	r6, 8002a5c <_strtol_l.constprop.0+0xe0>
 8002a5a:	4240      	negs	r0, r0
 8002a5c:	f1b8 0f00 	cmp.w	r8, #0
 8002a60:	d099      	beq.n	8002996 <_strtol_l.constprop.0+0x1a>
 8002a62:	2a00      	cmp	r2, #0
 8002a64:	d1f6      	bne.n	8002a54 <_strtol_l.constprop.0+0xd8>
 8002a66:	f8c8 1000 	str.w	r1, [r8]
 8002a6a:	e794      	b.n	8002996 <_strtol_l.constprop.0+0x1a>
 8002a6c:	08002bfc 	.word	0x08002bfc

08002a70 <_strtol_r>:
 8002a70:	f7ff bf84 	b.w	800297c <_strtol_l.constprop.0>

08002a74 <_strtoul_l.constprop.0>:
 8002a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a78:	4e34      	ldr	r6, [pc, #208]	@ (8002b4c <_strtoul_l.constprop.0+0xd8>)
 8002a7a:	4686      	mov	lr, r0
 8002a7c:	460d      	mov	r5, r1
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a84:	5d37      	ldrb	r7, [r6, r4]
 8002a86:	f017 0708 	ands.w	r7, r7, #8
 8002a8a:	d1f8      	bne.n	8002a7e <_strtoul_l.constprop.0+0xa>
 8002a8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8002a8e:	d12f      	bne.n	8002af0 <_strtoul_l.constprop.0+0x7c>
 8002a90:	782c      	ldrb	r4, [r5, #0]
 8002a92:	2701      	movs	r7, #1
 8002a94:	1c85      	adds	r5, r0, #2
 8002a96:	f033 0010 	bics.w	r0, r3, #16
 8002a9a:	d109      	bne.n	8002ab0 <_strtoul_l.constprop.0+0x3c>
 8002a9c:	2c30      	cmp	r4, #48	@ 0x30
 8002a9e:	d12c      	bne.n	8002afa <_strtoul_l.constprop.0+0x86>
 8002aa0:	7828      	ldrb	r0, [r5, #0]
 8002aa2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8002aa6:	2858      	cmp	r0, #88	@ 0x58
 8002aa8:	d127      	bne.n	8002afa <_strtoul_l.constprop.0+0x86>
 8002aaa:	786c      	ldrb	r4, [r5, #1]
 8002aac:	2310      	movs	r3, #16
 8002aae:	3502      	adds	r5, #2
 8002ab0:	f04f 38ff 	mov.w	r8, #4294967295
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	fbb8 f8f3 	udiv	r8, r8, r3
 8002aba:	fb03 f908 	mul.w	r9, r3, r8
 8002abe:	ea6f 0909 	mvn.w	r9, r9
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8002ac8:	f1bc 0f09 	cmp.w	ip, #9
 8002acc:	d81c      	bhi.n	8002b08 <_strtoul_l.constprop.0+0x94>
 8002ace:	4664      	mov	r4, ip
 8002ad0:	42a3      	cmp	r3, r4
 8002ad2:	dd2a      	ble.n	8002b2a <_strtoul_l.constprop.0+0xb6>
 8002ad4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002ad8:	d007      	beq.n	8002aea <_strtoul_l.constprop.0+0x76>
 8002ada:	4580      	cmp	r8, r0
 8002adc:	d322      	bcc.n	8002b24 <_strtoul_l.constprop.0+0xb0>
 8002ade:	d101      	bne.n	8002ae4 <_strtoul_l.constprop.0+0x70>
 8002ae0:	45a1      	cmp	r9, r4
 8002ae2:	db1f      	blt.n	8002b24 <_strtoul_l.constprop.0+0xb0>
 8002ae4:	fb00 4003 	mla	r0, r0, r3, r4
 8002ae8:	2601      	movs	r6, #1
 8002aea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002aee:	e7e9      	b.n	8002ac4 <_strtoul_l.constprop.0+0x50>
 8002af0:	2c2b      	cmp	r4, #43	@ 0x2b
 8002af2:	bf04      	itt	eq
 8002af4:	782c      	ldrbeq	r4, [r5, #0]
 8002af6:	1c85      	addeq	r5, r0, #2
 8002af8:	e7cd      	b.n	8002a96 <_strtoul_l.constprop.0+0x22>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1d8      	bne.n	8002ab0 <_strtoul_l.constprop.0+0x3c>
 8002afe:	2c30      	cmp	r4, #48	@ 0x30
 8002b00:	bf0c      	ite	eq
 8002b02:	2308      	moveq	r3, #8
 8002b04:	230a      	movne	r3, #10
 8002b06:	e7d3      	b.n	8002ab0 <_strtoul_l.constprop.0+0x3c>
 8002b08:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8002b0c:	f1bc 0f19 	cmp.w	ip, #25
 8002b10:	d801      	bhi.n	8002b16 <_strtoul_l.constprop.0+0xa2>
 8002b12:	3c37      	subs	r4, #55	@ 0x37
 8002b14:	e7dc      	b.n	8002ad0 <_strtoul_l.constprop.0+0x5c>
 8002b16:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8002b1a:	f1bc 0f19 	cmp.w	ip, #25
 8002b1e:	d804      	bhi.n	8002b2a <_strtoul_l.constprop.0+0xb6>
 8002b20:	3c57      	subs	r4, #87	@ 0x57
 8002b22:	e7d5      	b.n	8002ad0 <_strtoul_l.constprop.0+0x5c>
 8002b24:	f04f 36ff 	mov.w	r6, #4294967295
 8002b28:	e7df      	b.n	8002aea <_strtoul_l.constprop.0+0x76>
 8002b2a:	1c73      	adds	r3, r6, #1
 8002b2c:	d106      	bne.n	8002b3c <_strtoul_l.constprop.0+0xc8>
 8002b2e:	2322      	movs	r3, #34	@ 0x22
 8002b30:	f8ce 3000 	str.w	r3, [lr]
 8002b34:	4630      	mov	r0, r6
 8002b36:	b932      	cbnz	r2, 8002b46 <_strtoul_l.constprop.0+0xd2>
 8002b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b3c:	b107      	cbz	r7, 8002b40 <_strtoul_l.constprop.0+0xcc>
 8002b3e:	4240      	negs	r0, r0
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d0f9      	beq.n	8002b38 <_strtoul_l.constprop.0+0xc4>
 8002b44:	b106      	cbz	r6, 8002b48 <_strtoul_l.constprop.0+0xd4>
 8002b46:	1e69      	subs	r1, r5, #1
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	e7f5      	b.n	8002b38 <_strtoul_l.constprop.0+0xc4>
 8002b4c:	08002bfc 	.word	0x08002bfc

08002b50 <_strtoul_r>:
 8002b50:	f7ff bf90 	b.w	8002a74 <_strtoul_l.constprop.0>

08002b54 <_malloc_usable_size_r>:
 8002b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b58:	1f18      	subs	r0, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bfbc      	itt	lt
 8002b5e:	580b      	ldrlt	r3, [r1, r0]
 8002b60:	18c0      	addlt	r0, r0, r3
 8002b62:	4770      	bx	lr

08002b64 <_init>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr

08002b70 <_fini>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	bf00      	nop
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr
